"highlight CursorIM guibg=Red
"highlight CursorIM guibg=Red guifg=NONE
set iminsert=0 imsearch=0
"
"set noimdisable

"let $VIMRUNTIME="/usr/share/nvim/runtime"
"set runtimepath+=/usr/share/nvim/runtime
"set runtimepath+=${HOME}/.vim/rc/


if filereadable(expand('compose.yaml'))
    let s:volume_name = 'vim_' . strftime('%Y%m%d%H%M%S')
    echom 'docker volume create ' . s:volume_name
    call system('docker volume ' . s:volume_name)
    let s:container_id = system('docker compose run -d -v ' . s:volume_name . ':/usr/local/lib/python3.10/site-packages app')
    " let s:compose_ps = json_decode(system('docker compose ps app --format json'))
    " let s:inspect = substitute(system(printf('docker inspect --type="container" %s', s:container_id)), '\n', '', 'g')
    let s:inspect = system(printf('docker inspect --type="container" %s', s:container_id))
    " echom s:inspect
    echom system(json_encode(s:inspect) . " | jq '.[].Mounts[]'")
    "echom printf('%s | jq ".[].Mounts[]. | select(.Name | contains(''%s''))"', s:inspect, s:volume_name)
    "echom system(printf('%s | jq ".[].Mounts[]. | select(.Name | contains(''%s''))"', s:inspect, s:volume_name))
    "let s:name = substitute(system("echo $EDITOR"), '\n', '', 'g')
    " echom system('docker inspect $(docker compose ps -q app) | jq')
    " echom system(printf("'%s' | jq '.[].Mounts'", s:compose_ps))
endif






























let s:venv_dir = getcwd() . '/.venv'
" echom s:venv_dir
if isdirectory(s:venv_dir)
    let $VIRTUAL_ENV = s:venv_dir
endif

" function! installRequirements(venv_dir)
"     echom 'install requirements...'
"     call system('source ' . venv_dir . '/bin/activate && pip install -r ~/.vim/requirements.txt')
" endfunction

let s:virtual_env = $VIRTUAL_ENV
if strlen(s:virtual_env) == 0
    " echom '$VIRTUAL_ENV not defined'
    let s:python3 = system('which python3')
    if strlen(s:python3) != 0
        let s:python3_dir = $HOME . '/.vim/python'
        if !isdirectory(s:python3_dir)
            " echom 'create venv...'
            call system('python3 -m venv ' . s:python3_dir)
        endif
        call jobstart('source ' . s:python3_dir . '/bin/activate && pip install pynvim')
        let g:python3_host_prog = s:python3_dir . '/bin/python'
        let $PATH = s:python3_dir . '/bin:' . $PATH
        let $VIRTUAL_ENV = s:python3_dir
    endif
else
    " echom '$VIRTUAL_ENV defined'
    " echom 'install pip...'
    " echom 'source ' . g:virtual_env . '/bin/activate && pip install -r ~/.vim/requirements.txt'
    call jobstart('source ' . s:virtual_env . '/bin/activate && pip install pynvim')
    let g:python3_host_prog = s:virtual_env . '/bin/python'
    let $PATH = s:virtual_env . '/bin:' . $PATH
endif

let s:pythonpath = $PYTHONPATH
if strlen(s:pythonpath) == 0
    let $PYTHONPATH = getcwd()
endif

" echom 'vimrc PYTHONPATH'
" echom $PYTHONPATH
" 
" echom 'vimrc virtualenv'
" echom $VIRTUAL_ENV
" 
" echom 'vimrc pwd'
" pwd

"echom 1
"pwd
"lcd ${HOME}/.vim/rc
"echom 2
"pwd
runtime! rc/*.vim
" runtime! rc/*.vim.lazy
"echom 3
"pwd
"lcd -
"echom 4
"pwd

