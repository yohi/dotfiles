" vim: set ft=vim :
" tomasiser/vim-code-dark
colorscheme codedark

" thinca/vim-zenspace
let g:zenspace#default_mode = 'on'
augroup vimrc-highlight
  autocmd!
  autocmd ColorScheme * highlight ZenSpace ctermbg=White guibg=White
augroup END

"vim-airline/vim-airline
"vim-airline/vim-airline-themes
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='deus'

" Yggdroot/indentLine
let g:indentLine_char = '¦'

" airblade/vim-gitgutter
set signcolumn=yes
let g:gitgutter_async = 1
let g:gitgutter_sign_modified = 'rw'
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow

" neoclide/coc.nvim
" let g:coc_global_extensions = [
"       \ 'coc-python',
"       \ 'coc-json',
"       \ 'coc-html',
"       \ 'coc-css',
"       \ 'coc-python',
"       \ 'coc-pyright',
"       \ 'coc-pyls',
"       \ 'coc-explorer',
"       \ 'coc-yank',
"       \ 'coc-snippets'
"       \ ]

" junegunn/fzf
" junegunn/fzf.vim
" nnoremap <C-g> :FzfPreviewProjectGrep .<CR>
nnoremap <C-p> :FzfPreviewProjectFile<CR>
" nnoremap <C-g> :CocCommand fzf-preview.ProjectGrep .<CR>
" nnoremap <C-p> :CocCommand fzf-preview.ProjectFiles<CR>


" w0rp/ale
let g:ale_sign_column_always = 1
let g:ale_disable_lsp = 0
let g:ale_linters = {'python': ['flake8']}
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" kamykn/spelunker.vim
set nospell

" vim-lsp
let g:lsp_diagnostics_enabled = 1 " Lintの有効or無効
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 0 " enable echo under cursor when in normal mode
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_signs_error = {'text': 'x'} " errorサインの変更
let g:lsp_signs_warning = {'text': '!'} " warningサインの変更
let g:lsp_signs_hint = {'text': '?'} " hintサインの変更
let g:lsp_highlights_enabled = 1
let g:lsp_textprop_enabled = 1
let g:lsp_virtual_text_enabled = 0
let g:lsp_highlight_references_enabled = 1
let g:lsp_insert_text_enabled = 0
let g:lsp_text_edit_enabled = 0
"let g:asyncomplete_auto_popup = 1
"let g:asyncomplete_auto_completeopt = 0
"let g:asyncomplete_popup_delay = 200
let g:asyncomplete_matchfuzzy = 1
let g:lsp_diagnostics_virtual_text_enabled = 0 " Lintエラーの横に仮想テキスト表示
 " 定義ジャンプ
nnoremap <F12> :LspDefinition<CR>
nnoremap <C-j> :LspDefinition<CR>
set completeopt-=preview

" vim-lsp-settings
let g:lsp_settings_filetype_python = 'pyright-langserver'

" blamer
let g:blamer_enabled = 1
let g:blamer_date_format = '%Y/%m/%d %H:%M'
let g:blamer_template = '<committer>, <committer-time>  * <summary>'

" pechorin/any-jump.vim
" let g:any_jump_disable_default_keybindings = 1
" " Normal mode: Jump to definition under cursore
" nnoremap <C-j> :AnyJump<CR>
" " Visual mode: jump to selected text in visual mode
" xnoremap <C-j> :AnyJumpVisual<CR>
" " Normal mode: open previous opened file (after jump)
" nnoremap <C-ab> :AnyJumpBack<CR>
" " Normal mode: open last closed search window again
" nnoremap <C-al> :AnyJumpLastResults<CR>

" Wilder ============================
call wilder#enable_cmdline_enter()

set wildcharm=<Tab>
cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

" only / and ? is enabled by default
call wilder#set_option('modes', ['/', '?', ':'])

""""""""""""""""""""""""""""""""""""""""""""""" Define mappings
""""""""""""""""""""""""""""""""""""""""""""""autocmd FileType denite call s:denite_my_settings()
""""""""""""""""""""""""""""""""""""""""""""""function! s:denite_my_settings() abort
""""""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> <CR>
""""""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('do_action')
""""""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> d
""""""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('do_action', 'delete')
""""""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> p
""""""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('do_action', 'preview')
""""""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> q
""""""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('quit')
""""""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> i
""""""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('open_filter_buffer')
""""""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> <Space>
""""""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('toggle_select').'j'
""""""""""""""""""""""""""""""""""""""""""""""endfunction
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""let s:denite_win_width_percent = 0.85
""""""""""""""""""""""""""""""""""""""""""""""let s:denite_win_height_percent = 0.7
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""" " Change denite default options
""""""""""""""""""""""""""""""""""""""""""""""" call denite#custom#option('default', {
"""""""""""""""""""""""""""""""""""""""""""""""     \ 'split': 'floating',
"""""""""""""""""""""""""""""""""""""""""""""""     \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
"""""""""""""""""""""""""""""""""""""""""""""""     \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
"""""""""""""""""""""""""""""""""""""""""""""""     \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
"""""""""""""""""""""""""""""""""""""""""""""""     \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
"""""""""""""""""""""""""""""""""""""""""""""""     \ })
""""""""""""""""""""""""""""""""""""""""""""""" 
""""""""""""""""""""""""""""""""""""""""""""""" call denite#custom#var('file/rec', 'command',
""""""""""""""""""""""""""""""""""""""""""""""" \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
""""""""""""""""""""""""""""""""""""""""""""""" customize ignore globs
""""""""""""""""""""""""""""""""""""""""""""""call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
""""""""""""""""""""""""""""""""""""""""""""""call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
""""""""""""""""""""""""""""""""""""""""""""""      \ [
""""""""""""""""""""""""""""""""""""""""""""""      \ '.git/', 'build/', '__pycache__/',
""""""""""""""""""""""""""""""""""""""""""""""      \ 'images/', '*.o', '*.make',
""""""""""""""""""""""""""""""""""""""""""""""      \ '*.min.*',
""""""""""""""""""""""""""""""""""""""""""""""      \ 'img/', 'fonts/'])

" nvim-treesitter
" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   ensure_installed = 'all',
"   highlight = { enable = true, },
"   incremental_selection = { enable = true, },
"   refactor = {
"     highlight_definitions = { enable = true },
"     highlight_current_scope = { enable = true },
"       smart_rename = { enable = true, },
"       navigation = { enable = true, },
" 
"     textobjects = {
"       select = { enable = true, },
"       swap = { enable = true, },
"       move = { enable = true, },
"     }
" }
" EOF

" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   -- Modules and its options go here
"   highlight = { enable = true },
"   incremental_selection = { enable = true },
"   refactor = {
"     highlight_definitions = { enable = true },
"     smart_rename = { enable = true },
"     navigation = { enable = true },
"   },
"   textobjects = { enable = true },
" }
" EOF
" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   highlight = {
"     enable = true,
"   },
"   indent = {
"     enable = true,
"   }
" }
" EOF

" treesitter
" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   highlight = {
"     enable = true,
"   },
"   indent = {
"     enable = false,
"   },
" }
" EOF



" Change file/rec command 
call denite#custom#var('file/rec', 'command',
\ ['rg', '--files', '--glob', '!.git', '--color', 'never'])

" Ripgrep command on grep source
call denite#custom#var('grep', {
           \ 'command': ['rg'],
           \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
           \ 'recursive_opts': [],
           \ 'pattern_opt': ['--regexp'],
           \ 'separator': ['--'],
           \ 'final_opts': [],
           \ })


if 1
    let s:floating_window_width_ratio = 0.85
    let s:floating_window_height_ratio = 0.7

    call denite#custom#option('default', {
    \ 'auto_action': 'preview',
    \ 'floating_preview': v:true,
    \ 'preview_height': float2nr(&lines * s:floating_window_height_ratio),
    \ 'preview_width': float2nr(&columns * s:floating_window_width_ratio / 2),
    \ 'prompt': '> ',
    \ 'split': 'floating',
    \ 'vertical_preview': v:true,
    \ 'wincol': float2nr((&columns - (&columns * s:floating_window_width_ratio)) / 2),
    \ 'winheight': float2nr(&lines * s:floating_window_height_ratio),
    \ 'winrow': float2nr((&lines - (&lines * s:floating_window_height_ratio)) / 2),
    \ 'winwidth': float2nr(&columns * s:floating_window_width_ratio / 2),
    \ 'floating-border': '|'
    \ })
else
    let s:floating_window_width_ratio = 0.85
    let s:floating_window_height_ratio = 0.7

    " Change denite default options
    call denite#custom#option('default', {
        \ 'auto_action': 'preview',
        \ 'floating_preview': v:true,
        \ 'preview_height': float2nr(&lines * s:floating_window_height_ratio),
        \ 'preview_width': float2nr(&columns * s:floating_window_width_ratio / 2),
        \ 'prompt': '> ',
        \ 'split': 'floating',
        \ 'vertical_preview': v:true,
        \ 'winwidth': float2nr(&columns * s:floating_window_width_ratio),
        \ 'wincol': float2nr((&columns - (&columns * s:floating_window_width_ratio)) / 2),
        \ 'winheight': float2nr(&lines * s:floating_window_height_ratio),
        \ 'winrow': float2nr((&lines - (&lines * s:floating_window_height_ratio)) / 2),
        \ })
endif



nmap <silent> ;f  :<C-u>Denite -start-filter file/rec<CR>
nmap <silent> ;F  :<C-u>DeniteProjectDir -start-filter file/rec<CR>
nmap <silent> ;g  :<C-u>DeniteProjectDir grep:::<C-r><C-w><CR>
nmap <silent> ;G  :<C-u>DeniteProjectDir grep:::<C-r><C-a><CR>
nmap <silent> ;;g :<C-u>Denite grep<CR>
nmap <silent> ;;G :<C-u>DeniteProjectDir grep<CR>
" nnoremap <C-p> :DeniteProjectDir -start-filter file/rec<CR>
nnoremap <C-g> :DeniteProjectDir -start-filter grep<CR>





let g:lazygit_floating_window_winblend = 0 " transparency of floating window
let g:lazygit_floating_window_scaling_factor = 0.9 " scaling factor for floating window
let g:lazygit_floating_window_corner_chars = ['╭', '╮', '╰', '╯'] " customize lazygit popup window corner characters
let g:lazygit_use_neovim_remote = 1 " fallback to 0 if neovim-remote is not installed

" setup mapping to call :LazyGit
nnoremap <silent> lg :LazyGit<CR>

" nvim-dap
lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
lua require('dap-python').test_runner = 'pytest'

nnoremap <silent> dn :lua require('dap-python').test_method()<CR>
nnoremap <silent> df :lua require('dap-python').test_class()<CR>
vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>

" deoppet
call deoppet#initialize()
call deoppet#custom#option('snippets',
\ map(globpath(&runtimepath, 'neosnippets', 1, 1),
\     { _, val -> { 'path': val } }))

imap <C-k>  <Plug>(deoppet_expand)
imap <C-f>  <Plug>(deoppet_jump_forward)
imap <C-b>  <Plug>(deoppet_jump_backward)
smap <C-f>  <Plug>(deoppet_jump_forward)
smap <C-b>  <Plug>(deoppet_jump_backward)



" ddc =====================================================
function DdcSource()
    " let l:sources = ['around', 'buffer', 'deoppet', 'necovim', 'zsh']
    let l:sources = ['around', 'buffer', 'deoppet', 'necovim']
    if g:nvim_lsp
        let l:lsp_source = ['nvimlsp']
    else
        let l:lsp_source = ['ddc-vim-lsp']
    endif
    return l:lsp_source + l:sources
endfunction

function DdcSourceOptions()
    let l:source_options = {
    \           '_': {
    \             'matchers': ['matcher_head'],
    \             'sorters': ['sorter_rank'],
    \             'converters': ['converter_remove_overlap']
    \           },
    \           'around': {
    \               'mark': 'A'
    \           },
    \           'buffer': {
    \               'mark': 'B'
    \           },
    \           'deoppet': {
    \               'mark': 'dp'
    \           },
    \           'necovim': {
    \               'mark': 'vim'
    \           },
    \    }
    if g:nvim_lsp
        let l:source_options['nvimlsp'] = { 'mark': 'lsp', 'forceCompletionPattern': '\\.|:|->', 'useIcon': v:true }
    else
        let l:source_options['ddc-vim-lsp'] = { 'mark': 'lsp' }
    endif
    return l:source_options
endfunction

function DdcSourceParams()
    let l:source_params = {'around': { 'maxSize': 500 }}
    if g:nvim_lsp
        let l:source_params['nvimlsp'] = { 'kindLabels': {'Class': 'c'}, 'useIcon': v:true }
   endif
   return l:source_params
endfunction

" Use matcher_head and sorter_rank.
let s:sources = DdcSource()
call ddc#custom#patch_global('sources', s:sources)
let s:source_options = DdcSourceOptions()
call ddc#custom#patch_global('sourceOptions', s:source_options)
let s:source_params = DdcSourceParams()
call ddc#custom#patch_global('sourceParams', s:source_params)
call ddc#custom#patch_global('filterParams', { 'buffer': { 'requireSameFiletype': v:false }})

" Mappings

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()

if g:deoplete
    " Shougo/deoplete.nvim
    let g:deoplete#enable_at_startup = 1

    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
      call deoplete#custom#buffer_option('auto_complete', v:false)

    " " ref. https://github.com/Shougo/denite.nvim/issues/657
    " autocmd FileType denite-filter call s:denite_filter_my_settings()
    " function! s:denite_filter_my_settings() abort
    "   call deoplete#custom#buffer_option('auto_complete', v:false)
    " endfunction


      " エンターキー: 垂直分割でファイルを開く
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action', 'vsplit')
      " スペースキー: 水平分割でファイルを開く
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('do_action', 'split')
      " エスケープキー: 終了
      nnoremap <silent><buffer><expr> <Esc>
      \ denite#do_map('quit')
      " Qキー: 終了
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      " Iキー: フィルター入力の開始
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      " Aキー: フィルター入力の開始
      nnoremap <silent><buffer><expr> a
      \ denite#do_map('open_filter_buffer')
    endfunction
endif
