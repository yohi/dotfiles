" vim: set ft=vim :

" tomasiser/vim-code-dark
colorscheme codedark

" thinca/vim-zenspace
let g:zenspace#default_mode = 'on'
augroup vimrc-highlight
  autocmd!
  autocmd ColorScheme * highlight ZenSpace ctermbg=White guibg=White
augroup END

"vim-airline/vim-airline
"vim-airline/vim-airline-themes
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='deus'

" Yggdroot/indentLine
let g:indentLine_char = '¦'

" airblade/vim-gitgutter
set signcolumn=yes
let g:gitgutter_async = 1
let g:gitgutter_sign_modified = 'rw'
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow

" neoclide/coc.nvim
" let g:coc_global_extensions = [
"       \ 'coc-python',
"       \ 'coc-json',
"       \ 'coc-html',
"       \ 'coc-css',
"       \ 'coc-python',
"       \ 'coc-pyright',
"       \ 'coc-pyls',
"       \ 'coc-explorer',
"       \ 'coc-yank',
"       \ 'coc-snippets'
"       \ ]

" junegunn/fzf
" junegunn/fzf.vim
nnoremap <C-g> :FzfPreviewProjectGrep .<CR>
nnoremap <C-g> :CocCommand fzf-preview.ProjectGrep .<CR>
" nnoremap <C-p> :FzfPreviewProjectFile<CR>
nnoremap <C-p> :CocCommand fzf-preview.ProjectFiles<CR>

" w0rp/ale
let g:ale_sign_column_always = 1
let g:ale_disable_lsp = 0
let g:ale_linters = {'python': ['flake8']}
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" kamykn/spelunker.vim
set nospell

" Shougo/deoplete.nvim
let g:deoplete#enable_at_startup = 1

" vim-lsp
let g:lsp_diagnostics_enabled = 1 " Lintの有効or無効
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 0 " enable echo under cursor when in normal mode
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_signs_error = {'text': 'x'} " errorサインの変更
let g:lsp_signs_warning = {'text': '!'} " warningサインの変更
let g:lsp_signs_hint = {'text': '?'} " hintサインの変更
let g:lsp_highlights_enabled = 1
let g:lsp_textprop_enabled = 1
let g:lsp_virtual_text_enabled = 0
let g:lsp_highlight_references_enabled = 1
let g:lsp_insert_text_enabled = 0
let g:lsp_text_edit_enabled = 0
"let g:asyncomplete_auto_popup = 1
"let g:asyncomplete_auto_completeopt = 0
"let g:asyncomplete_popup_delay = 200
set completeopt-=preview

" vim-lsp-settings
let g:lsp_settings_filetype_python = 'pyls-ms'

" blamer
let g:blamer_enabled = 1
let g:blamer_date_format = '%Y/%m/%d %H:%M'
let g:blamer_template = '<committer>, <committer-time>  * <summary>'

" pechorin/any-jump.vim
" let g:any_jump_disable_default_keybindings = 1
" " Normal mode: Jump to definition under cursore
" nnoremap <C-j> :AnyJump<CR>
" " Visual mode: jump to selected text in visual mode
" xnoremap <C-j> :AnyJumpVisual<CR>
" " Normal mode: open previous opened file (after jump)
" nnoremap <C-ab> :AnyJumpBack<CR>
" " Normal mode: open last closed search window again
" nnoremap <C-al> :AnyJumpLastResults<CR>

" Wilder ============================
call wilder#enable_cmdline_enter()

set wildcharm=<Tab>
cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

" only / and ? is enabled by default
call wilder#set_option('modes', ['/', '?', ':'])



" nvim-treesitter
" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   ensure_installed = 'all',
"   highlight = { enable = true, },
"   incremental_selection = { enable = true, },
"   refactor = {
"     highlight_definitions = { enable = true },
"     highlight_current_scope = { enable = true },
"       smart_rename = { enable = true, },
"       navigation = { enable = true, },
" 
"     textobjects = {
"       select = { enable = true, },
"       swap = { enable = true, },
"       move = { enable = true, },
"     }
" }
" EOF

" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   -- Modules and its options go here
"   highlight = { enable = true },
"   incremental_selection = { enable = true },
"   refactor = {
"     highlight_definitions = { enable = true },
"     smart_rename = { enable = true },
"     navigation = { enable = true },
"   },
"   textobjects = { enable = true },
" }
" EOF
