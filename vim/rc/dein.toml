# プラグインマネージャー
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = [
    'context_filetype.vim',
]

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# パッケージマネージャー
[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = [
    'mason-lspconfig.nvim',
    'nvim-lspconfig',
]

# オプティマイザ
[[plubins]]
repo = 'lewis6991/impatient.nvim'
lua_source = '''
    require('impatient')
'''

# 通知
[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_add = '''
    vim.opt.termguicolors = true
    require('notify').setup({
        background_colour = "#000000",
    })
'''

# 自動インデント検出
[[plugins]]
repo = 'Darazaki/indent-o-matic'
lua_source = '''
    require('indent-o-matic').setup {
        -- The values indicated here are the default

        -- Number of lines without indentation before giving up (use -1 for infinite)
        max_lines = 2048,

        -- Space indentations that should be detected
        standard_widths = { 2, 4, 8 },

        -- Skip multi-line comments and strings (more accurate detection but less performant)
        skip_multiline = true,
    }
'''

# FixCursorHold
[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
lua_source = '''
    -- in millisecond, used for both CursorHold and CursorHoldI,
    -- use updatetime instead if not defined
    vim.cmd([[
        let g:cursorhold_updatetime = 100
    ]])
'''

# アイコン
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

# ステータスライン
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    source ~/dotfiles/vim/rc/plugin-configs/vim/vim-airline.vim
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
lua_add = '''
    vim.cmd([[
        let g:airline_theme='deus'
    ]])
'''

# シンタックスハイライト
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lua_source = '''
    require('config.nvim-treesitter')
'''

# カッコハイライト
[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
depends = [
    'nvim-treesitter/nvim-treesitter',
]
lua_add = '''
    require('nvim-treesitter.configs')
'''

# タグ自動クローズ
[[plugins]]
repo = 'windwp/nvim-ts-autotag'
depends = [
    'nvim-treesitter/nvim-treesitter',
]
lua_source = '''
    require('config.nvim-treesitter')
'''

# コンテクストコメント
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
lua_source = '''
    require('nvim-treesitter.configs').setup {}
'''

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = [
    'mason-lspconfig.nvim'
    'rrethy/vim-illuminate',
    # 'read-or-create-venv.vim',
]
lua_add = '''
    require('config.lsp')
'''

# LSP設定
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'

# フォーマッター・リンター
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = 'mason.nvim'
lua_source = '''
    require('config.null-ls')
'''

# null-ls設定
repo = 'jayp0521/mason-null-ls.nvim'
on_source = [
    'mason.nvim',
]


# FZF
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'
hook_add = '''
    nnoremap <C-p> :FzfPreviewProjectFile<CR>
'''

# Autopairs
[[plugins]]
repo = 'windwp/nvim-autopairs'
lua_add = '''
    require('nvim-autopairs').setup{}
'''

# カラースキーマ
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_source = '''
    " colorscheme codedark
    " au MyAutoCmd VimEnter * nested colorscheme codedark
    autocmd VimEnter * ++nested colorscheme codedark
'''

[[plugins]]
repo = 'WhoIsSethDaniel/mason-tool-installer.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
on_source = [
    'nvim-lspconfig',
]

[[plugins]]
repo = "utilyre/barbecue.nvim"
depends = [
    "nvim-navic",
    "nvim-web-devicons",
]

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'numToStr/Comment.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'


[[plugins]]
repo = 'SmiteshP/nvim-navbuddy'
on_source = [
    'nvim-lspconfig',
    'nvim-navic',
    'nui.nvim',
    'Comment.nvim',
    'telescope.nvim',
]

[[plugins]]
repo = 'folke/trouble.nvim'
on_source = 'kyazdani42/nvim-web-devicons'
hook_add = '''
lua << EOF
    require("trouble").setup {
        position = "bottom", -- position of the list can be: bottom, top, left, right
        height = 10, -- height of the trouble list when position is top or bottom
        width = 50, -- width of the list when position is left or right
        icons = true, -- use devicons for filenames
        mode = "document_diagnostics", -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
        fold_open = "", -- icon used for open folds
        fold_closed = "", -- icon used for closed folds
        group = true, -- group results by file
        padding = true, -- add an extra new line on top of the list
        action_keys = { -- key mappings for actions in the trouble list
            -- map to {} to remove a mapping, for example:
            -- close = {},
            close = "q", -- close the list
            cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
            refresh = "r", -- manually refresh
            jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
            open_split = { "<c-x>" }, -- open buffer in new split
            open_vsplit = { "<c-v>" }, -- open buffer in new vsplit
            open_tab = { "<c-t>" }, -- open buffer in new tab
            jump_close = {"o"}, -- jump to the diagnostic and close the list
            toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
            toggle_preview = "P", -- toggle auto_preview
            hover = "K", -- opens a small popup with the full multiline message
            preview = "p", -- preview the diagnostic location
            close_folds = {"zM", "zm"}, -- close all folds
            open_folds = {"zR", "zr"}, -- open all folds
            toggle_fold = {"zA", "za"}, -- toggle fold of current file
            previous = "k", -- preview item
            next = "j" -- next item
        },
        indent_lines = true, -- add an indent guide below the fold icons
        auto_open = false, -- automatically open the list when you have diagnostics
        auto_close = false, -- automatically close the list when you have no diagnostics
        auto_preview = true, -- automatically preview the location of the diagnostic. <esc> to close preview and go back to last window
        auto_fold = false, -- automatically fold a file trouble list at creation
        auto_jump = {"lsp_definitions"}, -- for the given modes, automatically jump if there is only a single result
        use_diagnostic_signs = true -- enabling this will use the signs defined in your lsp client
    }
EOF
'''

# インデント
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_color_term = 239
    let g:indentLine_color_gui = '#708090'
    let g:indentLine_char_list = ['|']
    let g:indentLine_fileTypeExclude = ['help', 'nerdtree']
    autocmd Filetype json :IndentLinesDisable
'''

# GIT系 ----------------------
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set updatetime=100
    let g:gitgutter_async = 1
    " let g:gitgutter_sign_added = '✚'
    " let g:gitgutter_sign_modified = '➡'
    " let g:gitgutter_sign_removed = '✖'
    let g:gitgutter_sign_added = '▎'
    let g:gitgutter_sign_modified = '▎'
    let g:gitgutter_sign_removed = '▎'
    highlight GitGutterAdd ctermfg=green
    highlight GitGutterChange ctermfg=yellow
    highlight GitGutterDelete ctermfg=red
    highlight GitGutterChangeDelete ctermfg=yellow
    nmap <C-g>s <Plug>(GitGutterPreviewHunk)
    nmap <C-g>j <Plug>(GitGutterNextHunk)
    nmap <C-g>k <Plug>(GitGutterPrevHunk)
    nmap <C-g>u <Plug>(GitGutterUndoHunk)
    nmap <C-g>h :GitGutterLineHighlightsToggle<CR>
'''

# vim rooter
[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
    let g:rooter_patterns = ['.venv/', '.git/', 'Makefile', '*.sln', 'build/env.sh']
'''

[[plugins]]
repo = 'rickhowe/diffchar.vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'vim-scripts/dbext.vim'

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
    let g:blamer_enabled = 1
    let g:blamer_date_format = '%Y/%m/%d %H:%M'
    let g:blamer_template = '<committer>, <committer-time>  * <summary>'
'''

[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_source = '''
    call wilder#enable_cmdline_enter()

    set wildcharm=<Tab>
    cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
    cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

    " only / and ? is enabled by default
    call wilder#set_option('modes', ['/', '?', ':'])
'''


# fern.vim
[[plugins]]
repo = 'lambdalisue/fern.vim'

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

# reword
[[plugins]]
repo = 'lambdalisue/reword.vim'

# rainvow_csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# lazygit.vim
[[plugins]]
repo = 'kdheepak/lazygit.nvim'
hook_add = '''
    " transparency of floating window
    let g:lazygit_floating_window_winblend = 0

    " scaling factor for floating window
    let g:lazygit_floating_window_scaling_factor = 0.9

    " customize lazygit popup window corner characters
    let g:lazygit_floating_window_border_chars = ['╭', '╮', '╰', '╯'] 

    " fallback to 0 if neovim-remote is not installed
    let g:lazygit_use_neovim_remote = 1 

    " setup mapping to call :LazyGit
    nnoremap <silent> lg :LazyGit<CR>
'''

# pastefix
[[plugins]]
repo = 'lambdalisue/pastefix.vim'

# denops
[[plugins]]
repo = 'vim-denops/denops.vim'

# deoppet
[[plugins]]
repo = 'Shougo/deoppet.nvim'
on_source = [
    'yohi/install-pip-package.nvim',
]
hook_source = '''
    call deoppet#initialize()
    call deoppet#custom#option('snippets',
    \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
    \     { _, val -> { 'path': val } }))
    imap <C-k>  <Plug>(deoppet_expand)
    imap <C-f>  <Plug>(deoppet_jump_forward)
    imap <C-b>  <Plug>(deoppet_jump_backward)
    smap <C-f>  <Plug>(deoppet_jump_forward)
    smap <C-b>  <Plug>(deoppet_jump_backward)
'''


[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'


[[plugins]]
repo = 'nvim-lua/plenary.nvim'
lua_add = '''
    local a = require "plenary.async"

    local read_file = function(path)
    local err, fd = a.uv.fs_open(path, "r", 438)
    assert(not err, err)

    local err, stat = a.uv.fs_fstat(fd)
    assert(not err, err)

    local err, data = a.uv.fs_read(fd, stat.size, 0)
    assert(not err, err)

    local err = a.uv.fs_close(fd)
    assert(not err, err)

    return data
end
'''

[[plugins]]
repo = 'MunifTanjim/prettier.nvim'

# ADD ======================================

[[plugins]]
repo = 'Shougo/neomru.vim'

# Filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▼'
    let g:NERDTreeShowBookmarks=1
    let g:NERDTreeShowHidden=1
    let g:NERDTreeQuitOnOpen=1
    let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
    
    function MyNerdToggle()
        if &filetype == 'nerdtree'
            :NERDTreeToggle
        else
            :NERDTreeFind
        endif
    endfunction
    
    nnoremap <Space>e :call MyNerdToggle()<CR>
    " map <Space>e :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'mileszs/ack.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
lua_add = '''
    require("fidget").setup{}
'''

[[plugins]]
repo = 'mhartington/oceanic-next'


# Add surrounding character
[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
    vnoremap " <Plug>VSurround"
    vnoremap ' <Plug>VSurround'
'''


# Replacement preview
[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'skanehira/denops-translate.vim'
depends = 'denops.vim'
hook_add = '''
    let g:translate_source = "en"
    let g:translate_target = "ja"
    let g:translate_popup_window = 0 " if you want use popup window, set value 1
    let g:translate_winsize = 10 " set buffer window height size if you doesn't use popup window
    let g:translate_endpoint = 'https://api-free.deepl.com/v2/translate'
    let g:translate_ui = 'popup'
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
    let g:vim_json_syntax_conceal = 0
    let g:indentLine_concealcursor="nc"
    au! BufAdd,BufRead,BufNew,BufEnter *.json let g:indentLine_conceallevel=1
    au! BufLeave,BufUnload,BufDelete,BufHidden *.json let g:indentLine_conceallevel=2
'''


[[plugins]]
if = 1
repo = 'neoclide/coc.nvim'
rev = 'release'
lua_add = '''
    print("coc lua_source")
    require('config.coc')
    print("coc lua_source end")
'''

# 自作
[[plugins]]
repo = '~/dotfiles/vim/local_plugins/set-docker-compose-env.nvim'
lua_source = '''
    require('set-docker-compose-env').setup()
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_source = '''
    source ~/dotfiles/vim/rc/plugin-configs/vim/ddu.rc.vim
'''
