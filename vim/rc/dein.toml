# プラグインマネージャー
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# パッケージマネージャー
[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = [
    'mason-lspconfig.nvim',
    'nvim-lspconfig',
]

# オプティマイザ
[[plubins]]
repo = 'lewis6991/impatient.nvim'
lua_source = '''
    require('impatient')
'''

# 通知
[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_add = '''
vim.opt.termguicolors = true
    require('notify').setup({
        background_colour = "#000000",
    })
'''



# 自動インデント検出
[[plugins]]
repo = 'Darazaki/indent-o-matic'
lua_source = '''
    require('indent-o-matic').setup {
        -- The values indicated here are the default

        -- Number of lines without indentation before giving up (use -1 for infinite)
        max_lines = 2048,

        -- Space indentations that should be detected
        standard_widths = { 2, 4, 8 },

        -- Skip multi-line comments and strings (more accurate detection but less performant)
        skip_multiline = true,
    }
'''

# FixCursorHold
[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
lua_source = '''
    -- in millisecond, used for both CursorHold and CursorHoldI,
    -- use updatetime instead if not defined
    vim.cmd([[
        let g:cursorhold_updatetime = 100
    ]])
'''

# アイコン
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# バッファライン
# [[plugins]]
# repo = 'akinsho/bufferline.nvim'
# rev = 'v3.*'
# depends = ['nvim-web-devicons']
# lua_source = '''
#     vim.opt.termguicolors = true
#     require("bufferline").setup{}
# '''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

# ステータスライン
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    source ~/dotfiles/vim/rc/plugin-configs/vim/vim-airline.vim
'''


[[plugins]]
repo = 'vim-airline/vim-airline-themes'
lua_add = '''
    vim.cmd([[
        let g:airline_theme='deus'
    ]])
'''

# シンタックスハイライト
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lua_add = '''
    require('config.nvim-treesitter')
'''

# カッコハイライト
[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
depends = [
    'nvim-treesitter/nvim-treesitter',
]
lua_add = '''
    require('nvim-treesitter.configs')
'''

# タグ自動クローズ
[[plugins]]
repo = 'windwp/nvim-ts-autotag'
depends = [
    'nvim-treesitter/nvim-treesitter',
]
lua_source = '''
    require('config.nvim-treesitter')
'''

# コンテクストコメント
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
lua_source = '''
    require'nvim-treesitter.configs'.setup {
      context_commentstring = {
        enable = true
      }
    }
'''

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = [
    'mason-lspconfig.nvim'
    'rrethy/vim-illuminate',
    # 'read-or-create-venv.vim',
]
lua_add = '''
    require('config.lsp')
'''

# LSP設定
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'

# フォーマッター・リンター
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = 'mason.nvim'
# depends = [
#     'nvim-lspconfig',
#     'vim-python-virtualenv',
#     # 'yohi/set-docker-compose-env.nvim',
# ]
lua_source = '''
    require('config.null-ls')
'''

# null-ls設定
repo = 'jayp0521/mason-null-ls.nvim'
on_source = [
    'mason.nvim',
    # 'null-ls.nvim',
]

##### # DAP
##### [[plugins]]
##### repo = 'mfussenegger/nvim-dap'
##### 
##### # DAP設定
##### [[plugins]]
##### repo = 'jayp0521/mason-nvim-dap.nvim'
##### depends = [
#####     'mason.nvim',
#####     'nvim-dap',
##### ]
##### lua_source = '''
#####     require("mason-nvim-dap").setup({
#####         automatic_setup = true,
#####         ensure_installed = { "python", "delve" }
#####     })
##### '''
##### 
##### # DAPUI
##### [[plugins]]
##### repo = 'rcarriga/nvim-dap-ui'
##### depends = [
#####     'nvim-dap'
##### ]
##### lua_source = '''
#####     require("dapui").setup({
#####       icons = { expanded = "", collapsed = "", current_frame = "" },
#####       mappings = {
#####         -- Use a table to apply multiple mappings
#####         expand = { "<CR>", "<2-LeftMouse>" },
#####         open = "o",
#####         remove = "d",
#####         edit = "e",
#####         repl = "r",
#####         toggle = "t",
#####       },
#####       -- Use this to override mappings for specific elements
#####       element_mappings = {
#####         -- Example:
#####         -- stacks = {
#####         --   open = "<CR>",
#####         --   expand = "o",
#####         -- }
#####       },
#####       -- Expand lines larger than the window
#####       -- Requires >= 0.7
#####       expand_lines = vim.fn.has("nvim-0.7") == 1,
#####       -- Layouts define sections of the screen to place windows.
#####       -- The position can be "left", "right", "top" or "bottom".
#####       -- The size specifies the height/width depending on position. It can be an Int
#####       -- or a Float. Integer specifies height/width directly (i.e. 20 lines/columns) while
#####       -- Float value specifies percentage (i.e. 0.3 - 30% of available lines/columns)
#####       -- Elements are the elements shown in the layout (in order).
#####       -- Layouts are opened in order so that earlier layouts take priority in window sizing.
#####       layouts = {
#####         {
#####           elements = {
#####           -- Elements can be strings or table with id and size keys.
#####             { id = "scopes", size = 0.25 },
#####             "breakpoints",
#####             "stacks",
#####             "watches",
#####           },
#####           size = 40, -- 40 columns
#####           position = "left",
#####         },
#####         {
#####           elements = {
#####             "repl",
#####             "console",
#####           },
#####           size = 0.25, -- 25% of total lines
#####           position = "bottom",
#####         },
#####       },
#####       controls = {
#####         -- Requires Neovim nightly (or 0.8 when released)
#####         enabled = true,
#####         -- Display controls in this element
#####         element = "repl",
#####         icons = {
#####           pause = "",
#####           play = "",
#####           step_into = "",
#####           step_over = "",
#####           step_out = "",
#####           step_back = "",
#####           run_last = "",
#####           terminate = "",
#####         },
#####       },
#####       floating = {
#####         max_height = nil, -- These can be integers or a float between 0 and 1.
#####         max_width = nil, -- Floats will be treated as percentage of your screen.
#####         border = "single", -- Border style. Can be "single", "double" or "rounded"
#####         mappings = {
#####           close = { "q", "<Esc>" },
#####         },
#####       },
#####       windows = { indent = 1 },
#####       render = {
#####         max_type_length = nil, -- Can be integer or nil.
#####         max_value_lines = 100, -- Can be integer or nil.
#####       }
#####     })
##### '''

# FZF
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'
hook_add = '''

    nnoremap <C-p> :FzfPreviewProjectFile<CR>

    " if executable('fish')
    "     " use fish for embedded terminals
    "     set shell=fish
    "     " use bash for else
    "     let $SHELL = 'bash'
    " endif
    " let mapleader = "\<Space>"

    " " nnoremap <silent> <Leader>f     :<C-u>FzfPreviewFromResourcesRpc project_mru git<CR>
    " " nnoremap <silent> <Leader>s    :<C-u>FzfPreviewGitStatusRpc<CR>
    " " nnoremap <silent> <Leader>A    :<C-u>FzfPreviewGitActionsRpc<CR>
    " " nnoremap <silent> <Leader>b     :<C-u>FzfPreviewBuffersRpc<CR>
    " " nnoremap <silent> <Leader>B     :<C-u>FzfPreviewAllBuffersRpc<CR>
    " " nnoremap <silent> <Leader>h     :<C-u>FzfPreviewFromResourcesRpc buffer project_mru<CR>
    " " nnoremap <silent> <Leader><C-o> :<C-u>FzfPreviewJumpsRpc<CR>
    " " nnoremap <silent> <Leader>c    :<C-u>FzfPreviewChangesRpc<CR>
    " " nnoremap <silent> <Leader>/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
    " " nnoremap <silent> <Leader>*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
    " " nnoremap          <Leader>g    :<C-u>FzfPreviewProjectGrepRpc<Space>
    " " xnoremap          <Leader>g    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
    " " nnoremap <silent> <Leader>t     :<C-u>FzfPreviewBufferTagsRpc<CR>
    " " nnoremap <silent> <Leader>;     :<C-u>FzfPreviewQuickFixRpc<CR>
    " " nnoremap <silent> <Leader>l     :<C-u>FzfPreviewLocationListRpc<CR>

    " augroup fzf_preview
    "   autocmd!
    "   autocmd User fzf_preview#rpc#initialized call s:fzf_preview_settings() " fzf_preview#remote#initialized or fzf_preview#coc#initialized
    " augroup END

    " function! s:fzf_preview_settings() abort
    "   let g:fzf_preview_command = 'COLORTERM=truecolor ' . g:fzf_preview_command
    "   let g:fzf_preview_grep_preview_cmd = 'COLORTERM=truecolor ' . g:fzf_preview_grep_preview_cmd
    " endfunction
'''

# Autopairs
[[plugins]]
repo = 'windwp/nvim-autopairs'
lua_add = '''
  require('nvim-autopairs').setup{}
'''

# カラースキーマ
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_source = '''
    " colorscheme codedark
    " au MyAutoCmd VimEnter * nested colorscheme codedark
    autocmd VimEnter * ++nested colorscheme codedark
'''

# 自作
# [[plugins]]
# repo = 'sansyrox/vim-python-virtualenv'
# on_source = 'yohi/read-or-create-venv.vim'

[[plugins]]
# repo = 'yohi/set-docker-compose-env.nvim'
repo = '~/dotfiles/vim/local_plugins/set-docker-compose-env.nvim'
lua_source = '''
require('set-docker-compose-env').setup()
'''


[[plugins]]
repo = 'WhoIsSethDaniel/mason-tool-installer.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
on_source = [
    'nvim-lspconfig',
]


[[plugins]]
repo = "utilyre/barbecue.nvim",
depends = [
    "nvim-navic",
    "nvim-web-devicons",
]

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'numToStr/Comment.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'


[[plugins]]
repo = 'SmiteshP/nvim-navbuddy'
on_source = [
    "nvim-lspconfig",
    "nvim-navic",
    "nui.nvim",
    "Comment.nvim",
    "telescope.nvim",
]


[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = [
    'nvim-lspconfig',
    'sansyrox/vim-python-virtualenv',
    'yohi/set-docker-compose-env.nvim',
]
lua_add = '''
require('config.null-ls')
'''


# [[plubins]]
# repo = 'rbtnn/vim-ambiwidth'
#
# [[plugins]]
# repo = 'powerline/powerline'

# [[plugins]]
# repo = 'Vimjas/vim-python-pep8-indent'

# [[plugins]]
# repo = 'lambdalisue/vim-django-support'

# 全角スペースをホワイトに表示
# [[plugins]]
# repo = 'thinca/vim-zenspace'
# hook_add = '''
# let g:zenspace#default_mode = 'on'
# augroup vimrc-highlight
#   autocmd!
#   autocmd ColorScheme * highlight ZenSpace ctermbg=White guibg=White
# augroup END
# '''


[[plugins]]
repo = 'folke/trouble.nvim'
on_source = 'kyazdani42/nvim-web-devicons'
hook_add = '''
lua << EOF
    require("trouble").setup {
        position = "bottom", -- position of the list can be: bottom, top, left, right
        height = 10, -- height of the trouble list when position is top or bottom
        width = 50, -- width of the list when position is left or right
        icons = true, -- use devicons for filenames
        mode = "document_diagnostics", -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
        fold_open = "", -- icon used for open folds
        fold_closed = "", -- icon used for closed folds
        group = true, -- group results by file
        padding = true, -- add an extra new line on top of the list
        action_keys = { -- key mappings for actions in the trouble list
            -- map to {} to remove a mapping, for example:
            -- close = {},
            close = "q", -- close the list
            cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
            refresh = "r", -- manually refresh
            jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
            open_split = { "<c-x>" }, -- open buffer in new split
            open_vsplit = { "<c-v>" }, -- open buffer in new vsplit
            open_tab = { "<c-t>" }, -- open buffer in new tab
            jump_close = {"o"}, -- jump to the diagnostic and close the list
            toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
            toggle_preview = "P", -- toggle auto_preview
            hover = "K", -- opens a small popup with the full multiline message
            preview = "p", -- preview the diagnostic location
            close_folds = {"zM", "zm"}, -- close all folds
            open_folds = {"zR", "zr"}, -- open all folds
            toggle_fold = {"zA", "za"}, -- toggle fold of current file
            previous = "k", -- preview item
            next = "j" -- next item
        },
        indent_lines = true, -- add an indent guide below the fold icons
        auto_open = false, -- automatically open the list when you have diagnostics
        auto_close = false, -- automatically close the list when you have no diagnostics
        auto_preview = true, -- automatically preview the location of the diagnostic. <esc> to close preview and go back to last window
        auto_fold = false, -- automatically fold a file trouble list at creation
        auto_jump = {"lsp_definitions"}, -- for the given modes, automatically jump if there is only a single result
        use_diagnostic_signs = true -- enabling this will use the signs defined in your lsp client
    }
EOF
'''

# インデント
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_color_term = 239
    let g:indentLine_color_gui = '#708090'
    let g:indentLine_char_list = ['|']
    let g:indentLine_fileTypeExclude = ['help', 'nerdtree']
    autocmd Filetype json :IndentLinesDisable
'''

# GIT系 ----------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set updatetime=100
    let g:gitgutter_async = 1
    " let g:gitgutter_sign_modified = 'rw'
    " let g:gitgutter_sign_added = '✚'
    " let g:gitgutter_sign_modified = '➡'
    " let g:gitgutter_sign_removed = '✖'
    let g:gitgutter_sign_added = '▎'
    let g:gitgutter_sign_modified = '▎'
    let g:gitgutter_sign_removed = '▎'
    highlight GitGutterAdd ctermfg=green
    highlight GitGutterChange ctermfg=yellow
    highlight GitGutterDelete ctermfg=red
    highlight GitGutterChangeDelete ctermfg=yellow
    nmap <C-g>s <Plug>(GitGutterPreviewHunk)
    nmap <C-g>j <Plug>(GitGutterNextHunk)
    nmap <C-g>k <Plug>(GitGutterPrevHunk)
    nmap <C-g>u <Plug>(GitGutterUndoHunk)
    nmap <C-g>h :GitGutterLineHighlightsToggle<CR>
'''

# vim rooter
[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_patterns = ['.venv/', '.git/', 'Makefile', '*.sln', 'build/env.sh']
'''

# LINT
# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
#     let g:ale_sign_column_always = 1
#     let g:ale_disable_lsp = 1
#     "let g:ale_linters = {'python': ['flake8']}
#     "let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
# '''

# [[plugins]]
# repo = 'kamykn/spelunker.vim'
# hook_add = '''
#     set nospell
# '''

[[plugins]]
repo = 'rickhowe/diffchar.vim'
[[plugins]]
repo = 'cohama/lexima.vim'



[[plugins]]
repo = 'vim-scripts/dbext.vim'


[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
    let g:blamer_enabled = 1
    let g:blamer_date_format = '%Y/%m/%d %H:%M'
    let g:blamer_template = '<committer>, <committer-time>  * <summary>'
'''

# [[plugins]]
# repo = 'pechorin/any-jump.vim'

# [[plugins]]
# repo = 'RRethy/vim-illuminate'


[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_source = '''
    call wilder#enable_cmdline_enter()

    set wildcharm=<Tab>
    cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
    cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

    " only / and ? is enabled by default
    call wilder#set_option('modes', ['/', '?', ':'])
'''


# fern.vim
[[plugins]]
repo = 'lambdalisue/fern.vim'
[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

# reword
[[plugins]]
repo = 'lambdalisue/reword.vim'

# # quickrun
# [[plugins]]
# repo = 'thinca/vim-quickrun'
# [[plugins]]
# repo = 'lambdalisue/vim-quickrun-neovim-job'
# hook_add = '''
# let g:quickrun_config = {'_': {}}
# if has('nvim')
#   # Use 'neovim_job' in Neovim
#   let g:quickrun_config._.runner = 'neovim_job'
# elseif exists('*ch_close_in')
#   # Use 'job' in Vim which support job feature
#   let g:quickrun_config._.runner = 'job'
# endif
# '''

# rainvow_csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# lazygit.vim
[[plugins]]
repo = 'kdheepak/lazygit.nvim'
hook_add = '''
    let g:lazygit_floating_window_winblend = 0 " transparency of floating window
    let g:lazygit_floating_window_scaling_factor = 0.9 " scaling factor for floating window
    let g:lazygit_floating_window_border_chars = ['╭', '╮', '╰', '╯'] " customize lazygit popup window corner characters
    let g:lazygit_use_neovim_remote = 1 " fallback to 0 if neovim-remote is not installed

    " setup mapping to call :LazyGit
    nnoremap <silent> lg :LazyGit<CR>
'''

# pastefix
[[plugins]]
repo = 'lambdalisue/pastefix.vim'

# denops
[[plugins]]
repo = 'vim-denops/denops.vim'

# command
# [[plugins]]
# repo = 'skanehira/command.vim'

# nvim-dap
# [[plugins]]
# repo = 'mfussenegger/nvim-dap'
# [[plugins]]
# repo = 'mfussenegger/nvim-dap-python'
# hook_add = '''
#     lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
#     lua require('dap-python').test_runner = 'pytest'
# 
#     nnoremap <silent> dn :lua require('dap-python').test_method()<CR>
#     nnoremap <silent> df :lua require('dap-python').test_class()<CR>
#     " vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>
# '''

# deoppet
[[plugins]]
repo = 'Shougo/deoppet.nvim'
on_source = [
'yohi/install-pip-package.nvim',
]
hook_source = '''
    " echom('deoppet')
    " echom('g:python3_host_prog')
    " echom(g:python3_host_prog)
    " echom('has python3?')
    " echom(has('python3'))
    call deoppet#initialize()
    call deoppet#custom#option('snippets',
    \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
    \     { _, val -> { 'path': val } }))
    imap <C-k>  <Plug>(deoppet_expand)
    imap <C-f>  <Plug>(deoppet_jump_forward)
    imap <C-b>  <Plug>(deoppet_jump_backward)
    smap <C-f>  <Plug>(deoppet_jump_forward)
    smap <C-b>  <Plug>(deoppet_jump_backward)
'''

# lsp
# if g:nvim_lsp
# else
#     [[plugins]]
# repo = 'prabirshrestha/async.vim'
#     [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
#     [[plugins]]
# repo = 'mattn/vim-lsp-settings'
#     [[plugins]]
# repo = 'shun/ddc-vim-lsp'
# endif


# if g:deoplete
#   # deoplete
#   if has('nvim')
#     [[plugins]]
# repo = 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
#   else
#     [[plugins]]
# repo = 'Shougo/deoplete.nvim'
#     [[plugins]]
# repo = 'roxma/nvim-yarp'
#     [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'
#   endif
#     [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
#     [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
#     [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
#   # [[plugins]]
# repo = 'deoplete-plugins/deoplete-jedi'
# else
  # ddc
# endif





[[plugins]]
repo = 'Shougo/ddu.vim'
hook_source = '''
    source ~/dotfiles/vim/rc/plugin-configs/vim/ddu.rc.vim
'''
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-kind-file'


[[plugins]]
repo = 'nvim-lua/plenary.nvim'
hook_add = '''
lua <<EOF
  local a = require "plenary.async"

  local read_file = function(path)
    local err, fd = a.uv.fs_open(path, "r", 438)
    assert(not err, err)

    local err, stat = a.uv.fs_fstat(fd)
    assert(not err, err)

    local err, data = a.uv.fs_read(fd, stat.size, 0)
    assert(not err, err)

    local err = a.uv.fs_close(fd)
    assert(not err, err)

    return data
end
EOF
'''

[[plugins]]
repo = 'MunifTanjim/prettier.nvim'


#[[plugins]]
# repo = 'vim-python/python-syntax'
#let g:python_highlight_all = 1

#[[plugins]]
# repo = 'lambdalisue/vim-django-support'

#[[plugins]]
# repo = 'klen/python-mode'
#let g:pymode_python = 'python3'

# ADD ======================================



[[plugins]]
repo = 'Shougo/neomru.vim'

# # Search Count
# [[plugins]]
# repo = 'osyo-manga/vim-anzu'
# hook_add = '''
#     nmap n <Plug>(anzu-n-with-echo)
#     nmap N <Plug>(anzu-N-with-echo)
#     nmap * <Plug>(anzu-star)
#     nmap # <Plug>(anzu-sharp)
# '''

# Visualize Space
# [[plugins]]
# repo = 'bronson/vim-trailing-whitespace'

# Filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▼'
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']

function MyNerdToggle()
    if &filetype == 'nerdtree'
        :NERDTreeToggle
    else
        :NERDTreeFind
    endif
endfunction

nnoremap <Space>e :call MyNerdToggle()<CR>
" map <Space>e :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'


[[plugins]]
repo = 'mileszs/ack.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'


# [[plugins]]
# repo = 'folke/which-key.nvim'
# hook_add = '''
# lua << EOF
#   require("which-key").setup {
#     -- your configuration comes here
#     -- or leave it empty to use the default settings
#     -- refer to the configuration section below
#   }
# EOF
# set timeoutlen=150
# '''


[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
rev = 'legacy'
lua_add = '''
  require("fidget").setup{}
'''

[[plugins]]
repo = 'mhartington/oceanic-next'


# [[plugins]]
# repo = 'jamestthompson3/nvim-remote-containers'
# 
# [[plugins]]
# repo = 'esensar/nvim-dev-container'
# hook_add = '''
# lua << EOF
#     require("devcontainer").setup{}
# EOF
# '''

# [[plugins]]
# repo = 'skywind3000/asyncrun.vim'
# 

# # Add surrounding character
[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
vnoremap " <Plug>VSurround"
vnoremap ' <Plug>VSurround'
'''

# [[plugins]]
# repo = 'tpope/vim-repeat'
# 
# [[plugins]]
# repo = 'tyru/caw.vim'
# 
# [[plugins]]
# repo = 'Shougo/context_filetype.vim'
# 
# # Substitute
# [[plugins]]
# repo = 'osyo-manga/vim-over'
# hook_add = '''
# " ---------- 'osyo-manga/vim-over' ----------
# " 全体置換
# nnoremap <silent> <Space>// :OverCommandLine<CR>%s/
# " カーソルしたの単語置換
# nnoremap <silent> <Space>o :OverCommandLine<CR>%s/<C-r><C-w>/
# '''
# # Substitute
# [[plugins]]
# repo = 'kana/vim-operator-user'
# 
# # Substitute
# [[plugins]]
# repo = 'kana/vim-operator-replace'
# hook_add = '''
# nmap <silent> <Space>r <Plug>(operator-replace)
# '''
# 
# 
# # Syntax check
# [[plugins]]
# repo = 'vim-syntastic/syntastic'


# Replacement preview
[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'skanehira/denops-translate.vim'
depends = 'denops.vim'
hook_add = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_popup_window = 0 " if you want use popup window, set value 1
let g:translate_winsize = 10 " set buffer window height size if you doesn't use popup window
let g:translate_endpoint = 'https://api-free.deepl.com/v2/translate'
let g:translate_ui = 'popup'
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
let g:indentLine_concealcursor="nc"
au! BufAdd,BufRead,BufNew,BufEnter *.json let g:indentLine_conceallevel=1
au! BufLeave,BufUnload,BufDelete,BufHidden *.json let g:indentLine_conceallevel=2
'''



[[plugins]]
if = 1
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
echom("coc hook_source")
autocmd FileType * let b:coc_suggest_disable = 1
'''
# -- autocmd FileType * let b:coc_enabled = 0
