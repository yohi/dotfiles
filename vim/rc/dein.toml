[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'rcarriga/nvim-notify'

# [[plubins]]
# repo = 'rbtnn/vim-ambiwidth'
# 
# [[plugins]]
# repo = 'powerline/powerline'

# カラースキーマ
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_source = '''
    " colorscheme codedark
    " au MyAutoCmd VimEnter * nested colorscheme codedark
    autocmd VimEnter * ++nested colorscheme codedark
'''

# 全角スペースをホワイトに表示
# [[plugins]]
# repo = 'thinca/vim-zenspace'
# hook_add = '''
# let g:zenspace#default_mode = 'on'
# augroup vimrc-highlight
#   autocmd!
#   autocmd ColorScheme * highlight ZenSpace ctermbg=White guibg=White
# augroup END
# '''

# ステータスバー
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_powerline_fonts = 1

    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    let g:airline_symbols.colnr = '  :'
    let g:airline_symbols.readonly = ' '
    let g:airline_symbols.linenr = '  :'

    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    " let g:airline#extensions#tabline#fnamemod = ':t'
    " let g:airline#extensions#tabline#buffer_nr_show = 1

    let g:airline#extensions#nvimlsp#enabled = 1
    let g:airline#extensions#nvimlsp#error_symbol = ' '
    let g:airline#extensions#nvimlsp#warning_symbol = ' '


    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#virtualenv#ft = ['python', 'markdown']

    let g:airline#extensions#whitespace#enabled = 1

    let g:airline#extensions#branch#enabled = 1
    let g:airline#extensions#branch#format = 1

    let g:airline#extensions#fzf#enabled = 1

    let g:airline#extensions#hunks#enabled = 1
    let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']

    " nmap <C-n> <Plug>AirlineSelectNextTab
    " nmap <C-p> <Plug>AirlineSelectPrevTab
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
    " let g:airline_theme='oceanicnext'
    " let g:airline_theme='wombat'
    let g:airline_theme='deus'
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'folke/trouble.nvim'
on_source = 'kyazdani42/nvim-web-devicons'
hook_add = '''
lua << EOF
    require("trouble").setup {
        position = "bottom", -- position of the list can be: bottom, top, left, right
        height = 10, -- height of the trouble list when position is top or bottom
        width = 50, -- width of the list when position is left or right
        icons = true, -- use devicons for filenames
        mode = "document_diagnostics", -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
        fold_open = "", -- icon used for open folds
        fold_closed = "", -- icon used for closed folds
        group = true, -- group results by file
        padding = true, -- add an extra new line on top of the list
        action_keys = { -- key mappings for actions in the trouble list
            -- map to {} to remove a mapping, for example:
            -- close = {},
            close = "q", -- close the list
            cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
            refresh = "r", -- manually refresh
            jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
            open_split = { "<c-x>" }, -- open buffer in new split
            open_vsplit = { "<c-v>" }, -- open buffer in new vsplit
            open_tab = { "<c-t>" }, -- open buffer in new tab
            jump_close = {"o"}, -- jump to the diagnostic and close the list
            toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
            toggle_preview = "P", -- toggle auto_preview
            hover = "K", -- opens a small popup with the full multiline message
            preview = "p", -- preview the diagnostic location
            close_folds = {"zM", "zm"}, -- close all folds
            open_folds = {"zR", "zr"}, -- open all folds
            toggle_fold = {"zA", "za"}, -- toggle fold of current file
            previous = "k", -- preview item
            next = "j" -- next item
        },
        indent_lines = true, -- add an indent guide below the fold icons
        auto_open = false, -- automatically open the list when you have diagnostics
        auto_close = false, -- automatically close the list when you have no diagnostics
        auto_preview = true, -- automatically preview the location of the diagnostic. <esc> to close preview and go back to last window
        auto_fold = false, -- automatically fold a file trouble list at creation
        auto_jump = {"lsp_definitions"}, -- for the given modes, automatically jump if there is only a single result
        use_diagnostic_signs = true -- enabling this will use the signs defined in your lsp client
    }
EOF
'''

# インデント
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_color_term = 239
    let g:indentLine_color_gui = '#708090'
    let g:indentLine_char_list = ['|']
    let g:indentLine_fileTypeExclude = ['help', 'nerdtree']
    autocmd Filetype json :IndentLinesDisable
'''

# GIT系 ----------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set updatetime=100
    let g:gitgutter_async = 1
    " let g:gitgutter_sign_modified = 'rw'
    let g:gitgutter_sign_added = '✚'
    let g:gitgutter_sign_modified = '➡'
    let g:gitgutter_sign_removed = '✖'
    highlight GitGutterAdd ctermfg=green
    highlight GitGutterChange ctermfg=yellow
    highlight GitGutterDelete ctermfg=red
    highlight GitGutterChangeDelete ctermfg=yellow
    nmap <C-g>s <Plug>(GitGutterPreviewHunk)
    nmap <C-g>j <Plug>(GitGutterNextHunk)
    nmap <C-g>k <Plug>(GitGutterPrevHunk)
    nmap <C-g>u <Plug>(GitGutterUndoHunk)
    nmap <C-g>h :GitGutterLineHighlightsToggle<CR>
'''

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'
hook_add = '''

    nnoremap <C-p> :FzfPreviewProjectFile<CR>

    " if executable('fish')
    "     " use fish for embedded terminals
    "     set shell=fish
    "     " use bash for else
    "     let $SHELL = 'bash'
    " endif
    " let mapleader = "\<Space>"

    " " nnoremap <silent> <Leader>f     :<C-u>FzfPreviewFromResourcesRpc project_mru git<CR>
    " " nnoremap <silent> <Leader>s    :<C-u>FzfPreviewGitStatusRpc<CR>
    " " nnoremap <silent> <Leader>A    :<C-u>FzfPreviewGitActionsRpc<CR>
    " " nnoremap <silent> <Leader>b     :<C-u>FzfPreviewBuffersRpc<CR>
    " " nnoremap <silent> <Leader>B     :<C-u>FzfPreviewAllBuffersRpc<CR>
    " " nnoremap <silent> <Leader>h     :<C-u>FzfPreviewFromResourcesRpc buffer project_mru<CR>
    " " nnoremap <silent> <Leader><C-o> :<C-u>FzfPreviewJumpsRpc<CR>
    " " nnoremap <silent> <Leader>c    :<C-u>FzfPreviewChangesRpc<CR>
    " " nnoremap <silent> <Leader>/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
    " " nnoremap <silent> <Leader>*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
    " " nnoremap          <Leader>g    :<C-u>FzfPreviewProjectGrepRpc<Space>
    " " xnoremap          <Leader>g    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
    " " nnoremap <silent> <Leader>t     :<C-u>FzfPreviewBufferTagsRpc<CR>
    " " nnoremap <silent> <Leader>;     :<C-u>FzfPreviewQuickFixRpc<CR>
    " " nnoremap <silent> <Leader>l     :<C-u>FzfPreviewLocationListRpc<CR>

    " augroup fzf_preview
    "   autocmd!
    "   autocmd User fzf_preview#rpc#initialized call s:fzf_preview_settings() " fzf_preview#remote#initialized or fzf_preview#coc#initialized
    " augroup END

    " function! s:fzf_preview_settings() abort
    "   let g:fzf_preview_command = 'COLORTERM=truecolor ' . g:fzf_preview_command
    "   let g:fzf_preview_grep_preview_cmd = 'COLORTERM=truecolor ' . g:fzf_preview_grep_preview_cmd
    " endfunction
'''

# vim rooter
[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_patterns = ['.venv/', '.git/', 'Makefile', '*.sln', 'build/env.sh']
'''

# LINT
# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
#     let g:ale_sign_column_always = 1
#     let g:ale_disable_lsp = 1
#     "let g:ale_linters = {'python': ['flake8']}
#     "let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
# '''

# [[plugins]]
# repo = 'kamykn/spelunker.vim'
# hook_add = '''
#     set nospell
# '''

[[plugins]]
repo = 'rickhowe/diffchar.vim'
[[plugins]]
repo = 'cohama/lexima.vim'
[[plugins]]
repo = 'rhysd/git-messenger.vim'
[[plugins]]
repo = 'vim-scripts/dbext.vim'

# for python developmen
[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
[[plugins]]
repo = 'sansyrox/vim-python-virtualenv'
# [[plugins]]
# repo = 'Vimjas/vim-python-pep8-indent'
# [[plugins]]
# repo = 'lambdalisue/vim-django-support'


[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
    let g:blamer_enabled = 1
    let g:blamer_date_format = '%Y/%m/%d %H:%M'
    let g:blamer_template = '<committer>, <committer-time>  * <summary>'
'''

# [[plugins]]
# repo = 'pechorin/any-jump.vim'

# [[plugins]]
# repo = 'RRethy/vim-illuminate'


[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_add = '''
    call wilder#enable_cmdline_enter()

    set wildcharm=<Tab>
    cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
    cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

    " only / and ? is enabled by default
    call wilder#set_option('modes', ['/', '?', ':'])
'''


# fern.vim
[[plugins]]
repo = 'lambdalisue/fern.vim'
[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

# reword
[[plugins]]
repo = 'lambdalisue/reword.vim'

# # quickrun
# [[plugins]]
# repo = 'thinca/vim-quickrun'
# [[plugins]]
# repo = 'lambdalisue/vim-quickrun-neovim-job'
# hook_add = '''
# let g:quickrun_config = {'_': {}}
# if has('nvim')
#   # Use 'neovim_job' in Neovim
#   let g:quickrun_config._.runner = 'neovim_job'
# elseif exists('*ch_close_in')
#   # Use 'job' in Vim which support job feature
#   let g:quickrun_config._.runner = 'job'
# endif
# '''

# rainvow_csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# lazygit.vim
[[plugins]]
repo = 'kdheepak/lazygit.nvim'
hook_add = '''
    let g:lazygit_floating_window_winblend = 0 " transparency of floating window
    let g:lazygit_floating_window_scaling_factor = 0.9 " scaling factor for floating window
    let g:lazygit_floating_window_corner_chars = ['╭', '╮', '╰', '╯'] " customize lazygit popup window corner characters
    let g:lazygit_use_neovim_remote = 1 " fallback to 0 if neovim-remote is not installed

    " setup mapping to call :LazyGit
    nnoremap <silent> lg :LazyGit<CR>
'''

# pastefix
[[plugins]]
repo = 'lambdalisue/pastefix.vim'

# denops
[[plugins]]
repo = 'vim-denops/denops.vim'

# command
# [[plugins]]
# repo = 'skanehira/command.vim'

# nvim-dap
# [[plugins]]
# repo = 'mfussenegger/nvim-dap'
# [[plugins]]
# repo = 'mfussenegger/nvim-dap-python'
# hook_add = '''
#     lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
#     lua require('dap-python').test_runner = 'pytest'
# 
#     nnoremap <silent> dn :lua require('dap-python').test_method()<CR>
#     nnoremap <silent> df :lua require('dap-python').test_class()<CR>
#     " vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>
# '''

# deoppet
[[plugins]]
repo = 'Shougo/deoppet.nvim'
hook_add = '''
    call deoppet#initialize()
    call deoppet#custom#option('snippets',
    \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
    \     { _, val -> { 'path': val } }))
    imap <C-k>  <Plug>(deoppet_expand)
    imap <C-f>  <Plug>(deoppet_jump_forward)
    imap <C-b>  <Plug>(deoppet_jump_backward)
    smap <C-f>  <Plug>(deoppet_jump_forward)
    smap <C-b>  <Plug>(deoppet_jump_backward)
'''

# lsp
# if g:nvim_lsp
# else
#     [[plugins]]
# repo = 'prabirshrestha/async.vim'
#     [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
#     [[plugins]]
# repo = 'mattn/vim-lsp-settings'
#     [[plugins]]
# repo = 'shun/ddc-vim-lsp'
# endif


# if g:deoplete
#   # deoplete
#   if has('nvim')
#     [[plugins]]
# repo = 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
#   else
#     [[plugins]]
# repo = 'Shougo/deoplete.nvim'
#     [[plugins]]
# repo = 'roxma/nvim-yarp'
#     [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'
#   endif
#     [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
#     [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
#     [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
#   # [[plugins]]
# repo = 'deoplete-plugins/deoplete-jedi'
# else
  # ddc
# endif





[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
    source ~/dotfiles/vim/rc/plugins/ddu.rc.vim
'''
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-kind-file'


[[plugins]]
repo = 'nvim-lua/plenary.nvim'
hook_add = '''
lua <<EOF
  local a = require "plenary.async"

  local read_file = function(path)
    local err, fd = a.uv.fs_open(path, "r", 438)
    assert(not err, err)

    local err, stat = a.uv.fs_fstat(fd)
    assert(not err, err)

    local err, data = a.uv.fs_read(fd, stat.size, 0)
    assert(not err, err)

    local err = a.uv.fs_close(fd)
    assert(not err, err)

    return data
end
EOF
'''

[[plugins]]
repo = 'MunifTanjim/prettier.nvim'


#[[plugins]]
# repo = 'vim-python/python-syntax'
#let g:python_highlight_all = 1

#[[plugins]]
# repo = 'lambdalisue/vim-django-support'

#[[plugins]]
# repo = 'klen/python-mode'
#let g:pymode_python = 'python3'

# LAZY ===================================================

# ddc ---------------

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CursorHold']
depends = ['denops.vim', 'pum.vim']
hook_add = '''
    source ~/dotfiles/vim/rc/plugins/ddc.rc.vim
'''
# hook_add = '''
#     nnoremap :       <Cmd>call CommandlinePre()<CR>:
# 
#     function! CommandlinePre() abort
#       " Note: It disables default command line completion!
#       cnoremap <expr> <Tab>
#       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
#       \ ddc#manual_complete()
#       cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
#       cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
#       cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
# 
#       " Overwrite sources
#       if !exists('b:prev_buffer_config')
#         let b:prev_buffer_config = ddc#custom#get_buffer()
#       endif
#       call ddc#custom#patch_buffer('sources',
#               \ ['cmdline', 'cmdline-history', 'around'])
# 
#       autocmd User DDCCmdlineLeave ++once call CommandlinePost()
#       autocmd InsertEnter <buffer> ++once call CommandlinePost()
# 
#       " Enable command line completion
#       call ddc#enable_cmdline_completion()
#     endfunction
# 
#     function! CommandlinePost() abort
#       cunmap <Tab>
#       cunmap <S-Tab>
#       cunmap <C-y>
#       cunmap <C-e>
# 
#       " Restore sources
#       if exists('b:prev_buffer_config')
#         call ddc#custom#set_buffer(b:prev_buffer_config)
#         unlet b:prev_buffer_config
#       else
#         call ddc#custom#set_buffer({})
#       endif
#     endfunction
# 
# 
#     inoremap <silent><expr> <TAB>
#           \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
#           \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
#           \ '<TAB>' : ddc#manual_complete()
#     inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
#     inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
#     inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
#     inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
#     inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
# 
# 
# '''
# hook_source = '''
#     call ddc#custom#patch_global(
#     \       'sources',
#     \       [
#     \           'around',
#     \           'buffer',
#     \           'deoppet',
#     \           'necovim',
#     \           'tabnine',
#     \           'nvim-lsp',
#     \       ]
#     \   )
#     call ddc#custom#patch_global(
#     \       'sourceOptions',
#     \       {
#     \           '_': {
#     \               'matchers': ['matcher_head'],
#     \               'sorters': ['sorter_rank'],
#     \               'converters': ['converter_remove_overlap']
#     \           },
#     \           'around': {
#     \               'mark': 'A'
#     \           },
#     \           'buffer': {
#     \               'mark': 'B'
#     \           },
#     \           'deoppet': {
#     \               'mark': 'dp'
#     \           },
#     \           'necovim': {
#     \               'mark': 'vim'
#     \           },
#     \           'tabnine': {
#     \               'mark': 'TN',
#     \               'isVolatile': v:true,
#     \               'maxSize': 200,
#     \           },
#     \           'nvim-lsp': {
#     \               'mark': 'lsp',
#     \               'forceCompletionPattern': '\.\w*|:\w*|->\w*',
#     \               'useIcon': v:true,
#     \           },
#     \       }
#     \   )
#     call ddc#custom#patch_global(
#     \       'sourceParams',
#     \       {
#     \           'around': {
#     \               'maxSize': 500,
#     \           },
#     \           'nvim-lsp': {
#     \               'kindLabels': {
#     \                   'Class': 'c'
#     \               },
#     \               'useIcon': v:true,
#     \           }
#     \       }
#     \   )
#     call ddc#custom#patch_global(
#     \       'filterParams',
#     \       {
#     \           'buffer': {
#     \               'requireSameFiletype': v:false
#     \           }
#     \       }
#     \   )
#     call ddc#custom#patch_global(
#     \       'autoCompleteEvents',
#     \       [
#     \           'InsertEnter',
#     \           'TextChangedI',
#     \           'TextChangedP',
#     \           'CmdlineEnter',
#     \           'CmdlineChanged',
#     \       ]
#     \   )
#     call ddc#custom#patch_global('completionMenu', 'pum.vim')
# 
#     " inoremap <silent><expr> <TAB>
#     " \ pumvisible() ? '<C-n>' :
#     " \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
#     " \ '<TAB>' : ddc#manual_complete()
# 
#     " <S-TAB>: completion back.
#     " inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
# 
#     " inoremap <silent><expr> <TAB>
#     " \   ddc#map#pum_visible() ? '<C-n>' :
#     " \   (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
#     " \   '<TAB>' : ddc#map#manual_complete()
#     " inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'
# 
#     call ddc#enable()
# '''


[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'


# [[plugins]]
# repo = 'Shougo/ddc-zsh'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nextword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'williamboman/nvim-lsp-installer'
# on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
on_source = 'nvim-lspconfig'



[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
# rev = '1e59a77cf9db24a713d85525f4b55e3a6b5d115f'
on_source = [
    'vim-python-virtualenv',
    'nvim-lspconfig',
]
hook_add = '''
" echom "null-ls"
" pwd
" echom $VIRTUAL_ENV
" echo system('which python3')
" echo g:python3_host_prog
lua << EOF
   require('config.null-ls')
EOF
'''
##### hook_add = '''
##### lua <<EOF
##### 
#####     local null_ls = require("null-ls")
##### 
#####     local sources = {
#####         null_ls.builtins.diagnostics.djlint,
#####         null_ls.builtins.diagnostics.cspell,
#####         null_ls.builtins.diagnostics.mypy,
#####         null_ls.builtins.diagnostics.flake8,
#####     }
##### 
#####     null_ls.setup({
#####     -- diagnostics_format = '#{m} [#{c}]',
#####     -- diagnostics_format = '#{m} (#{s})',
#####     diagnostics_format = '#{s}: #{m}',
#####     sources = sources,
#####     -- on_attach = on_attach
#####   })
##### 
##### EOF
##### '''
##### 
##### # hook_add = '''
##### #     lua <<EOF
##### #         require("null-ls").setup({
##### #             sources = {
##### #                 debug = true,
##### # 
##### #                 -- require("null-ls").builtins.diagnostics.djlint,
##### #                 require("null-ls").builtins.diagnostics.cspell,
##### #                 -- require("null-ls").builtins.diagnostics.mypy,
##### #                 -- require("null-ls").builtins.diagnostics.flake8,
##### #             },
##### #         })
##### #         vim.lsp.set_log_level("DEBUG")
##### # 
##### # EOF
##### # '''






# nvim-lspconfig ----------

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'RRethy/vim-illuminate'
hook_add = '''
lua << EOF
    require('config.lsp')
EOF
'''
# highlight LspDiagnosticsSignError ctermbg=9 ctermfg=15
# highlight LspDiagnosticsSignHint ctermbg=142 ctermfg=15
# hook_add = '''
# lua << EOF
#   -- Mappings.
#   -- See `:help vim.diagnostic.*` for documentation on any of the below functions
#   local opts = { noremap=true, silent=true }
# 
#   vim.api.nvim_set_keymap('n', '<space>p', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
#   vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
#   vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
#   vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
#   vim.api.nvim_set_keymap('n', '<F12>', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
# 
# 
# 
# 
#   -- Use an on_attach function to only map the following keys
#   -- after the language server attaches to the current buffer
#   local on_attach = function(client, bufnr)
#     -- Enable completion triggered by <c-x><c-o>
#     vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
# 
#     -- Mappings.
#     -- See `:help vim.lsp.*` for documentation on any of the below functions
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
#     vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
#   end
# 
#   require('lspconfig').pyright.setup {
#     settings = {
#       python = {
#         analysis = {
#           autoImportCompletions = true,
#           autoSearchPaths = true,
#           diagnosticMode = "workspace",
#           diagnosticSeverityOverrides = "none",
#           -- extraPaths = '',
#           logLevel = 'Information',
#           -- stubPath = '',
#           typeCheckingMode = 'off',
#           -- typeshedPaths = '',
#           useLibraryCodeForType = true,
#         }
#       },
#     },
#   }
# 
#   vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
#       vim.lsp.diagnostic.on_publish_diagnostics, {
#           sign = true,
#           underline = true,
#           virtual_text = false,
#           -- virtual_text = {
#           --     spacing = 4,
#           -- },
#       }
#   )
# 
#   -- local on_references = vim.lsp.handlers["textDocument/references"]
#   -- vim.lsp.handlers["textDocument/references"] = vim.lsp.with(
#   --   on_references, {
#   --     -- Use location list instead of quickfix list
#   --     loclist = true,
#   --   }
#   -- )
# 
#   -- vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
#   --   vim.lsp.handlers.hover, {
#   --     -- Use a sharp border with `FloatBorder` highlights
#   --     border = "single"
#   --   }
#   -- )
# 
#   -- vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(
#   --   vim.lsp.handlers.signature_help, {
#   --     -- Use a sharp border with `FloatBorder` highlights
#   --     border = "single"
#   --   }
#   -- )
# 
# 
#   -- Use a loop to conveniently call 'setup' on multiple servers and
#   -- map buffer local keybindings when the language server attaches
#   -- local servers = { 'pyright', 'rust_analyzer', 'tsserver'  }
#   -- local lsp_installer = require "nvim-lsp-installer"
#   -- local lspconfig = require "lspconfig"
#   -- lsp_installer.setup()
#   -- for _, lsp in pairs(servers) do
#   -- for _, server in pairs(lsp_installer.get_installed_servers()) do
#   --   lspconfig[server.name].setup {
#   --     on_attach = on_attach,
#   --     flags = {
#   --       -- This will be the default in neovim 0.7+
#   --       debounce_text_changes = 150,
#   --     }
#   --   }
#   -- end
# 
# EOF
# 
# highlight LspDiagnosticsSignError ctermbg=9 ctermfg=15
# highlight LspDiagnosticsSignHint ctermbg=142 ctermfg=15
# '''
# hook_source = '''
#     lua <<EOF
#         require('nvim-lsp-installer').on_server_ready(function(server)
#             local opts = {}
#             opts.on_attach = function(client, buffer_number)
#             end
#             server:setup(opts)
#         end)
# 
#         vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
#             vim.lsp.diagnostic.on_publish_diagnostics, {
#                 sign = true,
#                 underline = true,
#                 -- virtual_text = false,
#                 virtual_text = {
#                     spacing = 4,
#                 },
#             }
#         )
# 
#         local on_references = vim.lsp.handlers["textDocument/references"]
#         vim.lsp.handlers["textDocument/references"] = vim.lsp.with(
#           on_references, {
#             -- Use location list instead of quickfix list
#             loclist = true,
#           }
#         )
# 
#         vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
#           vim.lsp.handlers.hover, {
#             -- Use a sharp border with `FloatBorder` highlights
#             border = "single"
#           }
#         )
# 
#         vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(
#           vim.lsp.handlers.signature_help, {
#             -- Use a sharp border with `FloatBorder` highlights
#             border = "single"
#           }
#         )
# 
#         require('lspconfig').pylsp.setup {}
# 
#         -- require('lspconfig').pyright.setup {
#         --   settings = {
#         --     python = {
#         --       analysis = {
#         --         autoSearchPaths = true,
#         --         diagnosticMode = "workspace",
#         --         useLibraryCodeForTypes = true,
#         --         typeCheckingMode = 'off',
#         --       }
#         --     },
#         --   },
#         -- }
# EOF
#     nnoremap <F12> <cmd>lua vim.lsp.buf.definition()<CR>
#     nnoremap <C-j> :LspDefinition<CR>
# '''
# hook_source = '''
#     lua <<EOF
#         local nvim_lspconfig = require("lspconfig")
#         local on_attach = function(client, bufnr)
#         local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
#         local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
# 
#         local opts = { noremap=true, silent=true }
#             buf_set_keymap('n', '<F12>', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
#         end
# 
#         nvim_lspconfig.pyright.setup{
#             on_attach = on_attach,
#             filetypes = { "python" }
#         }
# 
#         local nvim_lsp_installer = require("nvim-lsp-installer")
#         nvim_lsp_installer.on_server_ready(function(server)
#             local opts = {}
#             server:setup(opts)
#         end)
# 
#         nvim_lsp_installer.settings({
#           log_level = vim.log.levels.DEBUG,
#         })
# 
#         vim.lsp.set_log_level("INFO")
# EOF
#     " nnoremap <F12> :LspDefinition
#     " nnoremap <F12> <cmd>lua vim.lsp.buf.definition()<CR>
#     " nnoremap <C-j> :LspDefinition<CR>
#     set completeopt-=preview
# '''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_add = '''
" NOTE: You can use other key to expand snippet.

"" Expand
"imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
"smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

"" Expand or jump
"imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
"smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

"" Jump forward or backward
"imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
"smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

"" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
"" See https://github.com/hrsh7th/vim-vsnip/pull/50
" nmap        s   <Plug>(vsnip-select-text)
" xmap        s   <Plug>(vsnip-select-text)
" nmap        S   <Plug>(vsnip-cut-text)
" xmap        S   <Plug>(vsnip-cut-text)

" If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
"let g:vsnip_filetypes = {}
"let g:vsnip_filetypes.javascriptreact = ['javascript']
"let g:vsnip_filetypes.typescriptreact = ['typescript']
 '''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_add = '''
    call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_add = '''
    call signature_help#enable()

    " if you use with vim-lsp, disable vim-lsp's signature help feature
    let g:lsp_signature_help_enabled = 0
'''







# ADD ======================================



[[plugins]]
repo = 'Shougo/neomru.vim'

# # Search Count
# [[plugins]]
# repo = 'osyo-manga/vim-anzu'
# hook_add = '''
#     nmap n <Plug>(anzu-n-with-echo)
#     nmap N <Plug>(anzu-N-with-echo)
#     nmap * <Plug>(anzu-star)
#     nmap # <Plug>(anzu-sharp)
# '''

# Visualize Space
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# Filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▼'
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']

function MyNerdToggle()
    if &filetype == 'nerdtree'
        :NERDTreeToggle
    else
        :NERDTreeFind
    endif
endfunction

nnoremap <Space>e :call MyNerdToggle()<CR>
" map <Space>e :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'


[[plugins]]
repo = 'mileszs/ack.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'


# [[plugins]]
# repo = 'folke/which-key.nvim'
# hook_add = '''
# lua << EOF
#   require("which-key").setup {
#     -- your configuration comes here
#     -- or leave it empty to use the default settings
#     -- refer to the configuration section below
#   }
# EOF
# set timeoutlen=150
# '''


[[plugins]]
repo = 'j-hui/fidget.nvim'
hook_add = '''
lua << EOF
  require"fidget".setup{}
EOF
'''

[[plugins]]
repo = 'mhartington/oceanic-next'

# Icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'


# Syntax Highlight
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_add = '''
" treesitter
lua <<EOF
  require'nvim-treesitter.configs'.setup {
    -- A list of parser names, or "all"
    ensure_installed = { "c", "lua", "rust","typescript","vim","json","javascript", "python", "jsonc" },

    -- Install parsers synchronously (only applied to `ensure_installed`)
    sync_install = false,

    -- List of parsers to ignore installing (for "all")
    -- ignore_install = { "javascript" },

    highlight = {
      -- `false` will disable the whole extension
      enable = true,

      -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
      -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
      -- the name of the parser)
      -- list of language that will be disabled
      disable = { "c", "rust" },

      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    },
  }
EOF
'''

# Autopairs
# [[plugins]]
# repo = 'windwp/nvim-autopairs'
# hook_add = '''
# lua << EOF
#   require('nvim-autopairs').setup{}
# EOF
# '''

# Autotag
[[plugins]]
repo = 'windwp/nvim-ts-autotag'
hook_add = '''
lua << EOF
  require'nvim-treesitter.configs'.setup {
    autotag = {
      enable = true,
    }
  }
  require('nvim-ts-autotag').setup()

EOF
'''

# Syntax Highlight
[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
hook_add = '''
lua << EOF
  require("nvim-treesitter.configs").setup {
    highlight = {
        -- ...
    },
    -- ...
    rainbow = {
      enable = true,
      -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
      extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
      max_file_lines = nil, -- Do not enable for files with more than n lines, int
      -- colors = {}, -- table of hex strings
      -- termcolors = {} -- table of colour name strings
    }
    }
EOF
'''

# [[plugins]]
# repo = 'jamestthompson3/nvim-remote-containers'
# 
# [[plugins]]
# repo = 'esensar/nvim-dev-container'
# hook_add = '''
# lua << EOF
#     require("devcontainer").setup{}
# EOF
# '''

# [[plugins]]
# repo = 'skywind3000/asyncrun.vim'
# 
# # Add surrounding character
 [[plugins]]
 repo = 'tpope/vim-surround'
 hook_add = '''
 vnoremap " <Plug>VSurround"
 vnoremap ' <Plug>VSurround'
 '''

# [[plugins]]
# repo = 'tpope/vim-repeat'
# 
# [[plugins]]
# repo = 'tyru/caw.vim'
# 
# [[plugins]]
# repo = 'Shougo/context_filetype.vim'
# 
# # Substitute
# [[plugins]]
# repo = 'osyo-manga/vim-over'
# hook_add = '''
# " ---------- 'osyo-manga/vim-over' ----------
# " 全体置換
# nnoremap <silent> <Space>// :OverCommandLine<CR>%s/
# " カーソルしたの単語置換
# nnoremap <silent> <Space>o :OverCommandLine<CR>%s/<C-r><C-w>/
# '''
# # Substitute
# [[plugins]]
# repo = 'kana/vim-operator-user'
# 
# # Substitute
# [[plugins]]
# repo = 'kana/vim-operator-replace'
# hook_add = '''
# nmap <silent> <Space>r <Plug>(operator-replace)
# '''
# 
# 
# # Syntax check
# [[plugins]]
# repo = 'vim-syntastic/syntastic'
# 
# Replacement preview
[[plugins]]
repo = 'markonm/traces.vim'





[[plugins]]
repo = 'skanehira/denops-translate.vim'
depends = 'denops.vim'
hook_add = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_popup_window = 0 " if you want use popup window, set value 1
let g:translate_winsize = 10 " set buffer window height size if you doesn't use popup window
let g:translate_endpoint = 'https://api-free.deepl.com/v2/translate'
let g:translate_ui = 'popup'
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
let g:indentLine_concealcursor="nc"
au! BufAdd,BufRead,BufNew,BufEnter *.json let g:indentLine_conceallevel=1
au! BufLeave,BufUnload,BufDelete,BufHidden *.json let g:indentLine_conceallevel=2
'''


## ========================================================================


## " neoclide/coc.nvim
## " let g:coc_global_extensions = [
## "       \ 'coc-python',
## "       \ 'coc-json',
## "       \ 'coc-html',
## "       \ 'coc-css',
## "       \ 'coc-python',
## "       \ 'coc-pyright',
## "       \ 'coc-pyls',
## "       \ 'coc-explorer',
## "       \ 'coc-yank',
## "       \ 'coc-snippets'
## "       \ ]
## 
## " junegunn/fzf
## " junegunn/fzf.vim
## " nnoremap <C-g> :FzfPreviewProjectGrep .<CR>
## " nnoremap <C-p> :FzfPreviewProjectFile<CR>
## " nnoremap <C-g> :CocCommand fzf-preview.ProjectGrep .<CR>
## " nnoremap <C-p> :CocCommand fzf-preview.ProjectFiles<CR>
## 
## " vim-lsp
## let g:lsp_signs_enabled = 1         " enable signs
## let g:lsp_diagnostics_enabled = 1 " Lintの有効or無効
## let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
## let g:lsp_diagnostics_float_cursor = 0
## let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 1
## let g:lsp_diagnostics_virtual_text_enabled = 0 " Lintエラーの横に仮想テキスト表示
## let g:lsp_signs_error = {'text': 'x'} " errorサインの変更
## let g:lsp_signs_warning = {'text': '!'} " warningサインの変更
## let g:lsp_signs_hint = {'text': '?'} " hintサインの変更
## let g:lsp_highlights_enabled = 1
## let g:lsp_highlight_references_enabled = 1
## let g:lsp_textprop_enabled = 1
## let g:lsp_virtual_text_enabled = 0
## let g:lsp_insert_text_enabled = 0
## let g:lsp_text_edit_enabled = 0
## "let g:asyncomplete_auto_popup = 1
## "let g:asyncomplete_auto_completeopt = 0
## "let g:asyncomplete_popup_delay = 200
## let g:asyncomplete_matchfuzzy = 1
## 
## 
## if g:nvim_lsp
## else
##     " vim-lsp-settings
##     let g:lsp_settings_filetype_python = ['pyright-langserver', 'pylsp']
##     " let g:lsp_settings = {
##     " \       'pyright-langserver': {
##     " \           'alllowlist': [
##     " \               'python',
##     " \           ],
##     " \           'workspace_config': {
##     " \               'python': {
##     " \                   'analysis': {
##     " \                       'useLibraryCodeForTypes': v:true,
##     " \                       'typeCheckingMode': 'off',
##     " \                   }
##     " \               },
##     " \               'pylsp': {
##     " \                   'configurationSources': ['flake8'],
##     " \                   'plugins': {
##     " \                       'flake8': {
##     " \                           'enabled': 1
##     " \                       },
##     " \                       'mccabe': {
##     " \                           'enabled': 0
##     " \                       },
##     " \                       'pycodestyle': {
##     " \                           'enabled': 0
##     " \                       },
##     " \                       'pyflakes': {
##     " \                           'enabled': 0
##     " \                       },
##     " \                       'pylsp_mypy': {
##     " \                           'enabled': 0
##     " \                       }
##     " \                   }
##     " \               }
##     " \           }
##     " \       }
##     " \   }
##     nnoremap <F12> :LspDefinition<CR>
##     nnoremap <C-j> :LspDefinition<CR>
## endif
## 
## 
## " pechorin/any-jump.vim
## " let g:any_jump_disable_default_keybindings = 1
## " " Normal mode: Jump to definition under cursore
## " nnoremap <C-j> :AnyJump<CR>
## " " Visual mode: jump to selected text in visual mode
## " xnoremap <C-j> :AnyJumpVisual<CR>
## " " Normal mode: open previous opened file (after jump)
## " nnoremap <C-ab> :AnyJumpBack<CR>
## " " Normal mode: open last closed search window again
## " nnoremap <C-al> :AnyJumpLastResults<CR>
## 
## 
## """"""""""""""""""""""""""""""""""""""""""""""" Define mappings
## """"""""""""""""""""""""""""""""""""""""""""""autocmd FileType denite call s:denite_my_settings()
## """"""""""""""""""""""""""""""""""""""""""""""function! s:denite_my_settings() abort
## """"""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> <CR>
## """"""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('do_action')
## """"""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> d
## """"""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('do_action', 'delete')
## """"""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> p
## """"""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('do_action', 'preview')
## """"""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> q
## """"""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('quit')
## """"""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> i
## """"""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('open_filter_buffer')
## """"""""""""""""""""""""""""""""""""""""""""""  nnoremap <silent><buffer><expr> <Space>
## """"""""""""""""""""""""""""""""""""""""""""""  \ denite#do_map('toggle_select').'j'
## """"""""""""""""""""""""""""""""""""""""""""""endfunction
## """"""""""""""""""""""""""""""""""""""""""""""
## """"""""""""""""""""""""""""""""""""""""""""""let s:denite_win_width_percent = 0.85
## """"""""""""""""""""""""""""""""""""""""""""""let s:denite_win_height_percent = 0.7
## """"""""""""""""""""""""""""""""""""""""""""""
## """"""""""""""""""""""""""""""""""""""""""""""" " Change denite default options
## """"""""""""""""""""""""""""""""""""""""""""""" call denite#custom#option('default', {
## """""""""""""""""""""""""""""""""""""""""""""""     \ 'split': 'floating',
## """""""""""""""""""""""""""""""""""""""""""""""     \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
## """""""""""""""""""""""""""""""""""""""""""""""     \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
## """""""""""""""""""""""""""""""""""""""""""""""     \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
## """""""""""""""""""""""""""""""""""""""""""""""     \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
## """""""""""""""""""""""""""""""""""""""""""""""     \ })
## """"""""""""""""""""""""""""""""""""""""""""""" 
## """"""""""""""""""""""""""""""""""""""""""""""" call denite#custom#var('file/rec', 'command',
## """"""""""""""""""""""""""""""""""""""""""""""" \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
## """"""""""""""""""""""""""""""""""""""""""""""" customize ignore globs
## """"""""""""""""""""""""""""""""""""""""""""""call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
## """"""""""""""""""""""""""""""""""""""""""""""call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
## """"""""""""""""""""""""""""""""""""""""""""""      \ [
## """"""""""""""""""""""""""""""""""""""""""""""      \ '.git/', 'build/', '__pycache__/',
## """"""""""""""""""""""""""""""""""""""""""""""      \ 'images/', '*.o', '*.make',
## """"""""""""""""""""""""""""""""""""""""""""""      \ '*.min.*',
## """"""""""""""""""""""""""""""""""""""""""""""      \ 'img/', 'fonts/'])
## 
## " nvim-treesitter
## " lua <<EOF
## " require'nvim-treesitter.configs'.setup {
## "   ensure_installed = 'all',
## "   highlight = { enable = true, },
## "   incremental_selection = { enable = true, },
## "   refactor = {
## "     highlight_definitions = { enable = true },
## "     highlight_current_scope = { enable = true },
## "       smart_rename = { enable = true, },
## "       navigation = { enable = true, },
## " 
## "     textobjects = {
## "       select = { enable = true, },
## "       swap = { enable = true, },
## "       move = { enable = true, },
## "     }
## " }
## " EOF
## 
## " lua <<EOF
## " require'nvim-treesitter.configs'.setup {
## "   -- Modules and its options go here
## "   highlight = { enable = true },
## "   incremental_selection = { enable = true },
## "   refactor = {
## "     highlight_definitions = { enable = true },
## "     smart_rename = { enable = true },
## "     navigation = { enable = true },
## "   },
## "   textobjects = { enable = true },
## " }
## " EOF
## " lua <<EOF
## " require'nvim-treesitter.configs'.setup {
## "   highlight = {
## "     enable = true,
## "   },
## "   indent = {
## "     enable = true,
## "   }
## " }
## " EOF
## 
## " treesitter
## " lua <<EOF
## " require'nvim-treesitter.configs'.setup {
## "   highlight = {
## "     enable = true,
## "   },
## "   indent = {
## "     enable = false,
## "   },
## " }
## " EOF
## 
## 
## 
## " Change file/rec command 
## " call denite#custom#var('file/rec', 'command',
## " \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
## " 
## " " Ripgrep command on grep source
## " call denite#custom#var('grep', {
## "            \ 'command': ['rg'],
## "            \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
## "            \ 'recursive_opts': [],
## "            \ 'pattern_opt': ['--regexp'],
## "            \ 'separator': ['--'],
## "            \ 'final_opts': [],
## "            \ })
## " 
## " 
## " if 1
## "     let s:floating_window_width_ratio = 0.85
## "     let s:floating_window_height_ratio = 0.7
## " 
## "     call denite#custom#option('default', {
## "     \ 'auto_action': 'preview',
## "     \ 'floating_preview': v:true,
## "     \ 'preview_height': float2nr(&lines * s:floating_window_height_ratio),
## "     \ 'preview_width': float2nr(&columns * s:floating_window_width_ratio / 2),
## "     \ 'prompt': '> ',
## "     \ 'split': 'floating',
## "     \ 'vertical_preview': v:true,
## "     \ 'wincol': float2nr((&columns - (&columns * s:floating_window_width_ratio)) / 2),
## "     \ 'winheight': float2nr(&lines * s:floating_window_height_ratio),
## "     \ 'winrow': float2nr((&lines - (&lines * s:floating_window_height_ratio)) / 2),
## "     \ 'winwidth': float2nr(&columns * s:floating_window_width_ratio / 2),
## "     \ 'floating-border': '|'
## "     \ })
## " else
## "     let s:floating_window_width_ratio = 0.85
## "     let s:floating_window_height_ratio = 0.7
## " 
## "     " Change denite default options
## "     call denite#custom#option('default', {
## "         \ 'auto_action': 'preview',
## "         \ 'floating_preview': v:true,
## "         \ 'preview_height': float2nr(&lines * s:floating_window_height_ratio),
## "         \ 'preview_width': float2nr(&columns * s:floating_window_width_ratio / 2),
## "         \ 'prompt': '> ',
## "         \ 'split': 'floating',
## "         \ 'vertical_preview': v:true,
## "         \ 'winwidth': float2nr(&columns * s:floating_window_width_ratio),
## "         \ 'wincol': float2nr((&columns - (&columns * s:floating_window_width_ratio)) / 2),
## "         \ 'winheight': float2nr(&lines * s:floating_window_height_ratio),
## "         \ 'winrow': float2nr((&lines - (&lines * s:floating_window_height_ratio)) / 2),
## "         \ })
## " endif
## " 
## " 
## " 
## " nmap <silent> ;f  :<C-u>Denite -start-filter file/rec<CR>
## " nmap <silent> ;F  :<C-u>DeniteProjectDir -start-filter file/rec<CR>
## " nmap <silent> ;g  :<C-u>DeniteProjectDir grep:::<C-r><C-w><CR>
## " nmap <silent> ;G  :<C-u>DeniteProjectDir grep:::<C-r><C-a><CR>
## " nmap <silent> ;;g :<C-u>Denite grep<CR>
## " nmap <silent> ;;G :<C-u>DeniteProjectDir grep<CR>
## " " nnoremap <C-p> :DeniteProjectDir -start-filter file/rec<CR>
## " nnoremap <C-g> :DeniteProjectDir -start-filter grep<CR>
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## " ddc =====================================================
## function DdcSource()
##     " let l:sources = ['around', 'buffer', 'deoppet', 'necovim', 'zsh']
##     " let l:sources = ['around', 'buffer', 'deoppet', 'necovim', 'tabnine']
##     let l:sources = ['around', 'buffer', 'deoppet', 'necovim']
##     if g:nvim_lsp
##         let l:lsp_source = ['nvim-lsp']
##     else
##         let l:lsp_source = ['vim-lsp']
##     endif
##     return l:lsp_source + l:sources
## endfunction
## 
## function DdcSourceOptions()
##     let l:source_options = {
##     \           '_': {
##     \             'matchers': ['matcher_head'],
##     \             'sorters': ['sorter_rank'],
##     \             'converters': ['converter_remove_overlap']
##     \           },
##     \           'around': {
##     \               'mark': 'A'
##     \           },
##     \           'buffer': {
##     \               'mark': 'B'
##     \           },
##     \           'deoppet': {
##     \               'mark': 'dp'
##     \           },
##     \           'necovim': {
##     \               'mark': 'vim'
##     \           },
##     \           'tabnine': {
##     \               'mark': 'TN',
##     \               'isVolatile': v:true,
##     \               'maxSize': 200,
##     \           },
##     \    }
##     if g:nvim_lsp
##         " let l:source_options['nvim-lsp'] = { 'mark': 'lsp', 'forceCompletionPattern': '\\.|:|->', 'useIcon': v:true }
##         let l:source_options['nvim-lsp'] = { 
##         \ }
##         " let l:source_options['nvim-lsp'] = { 'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*', 'useIcon': v:true }
##     else
##         let l:source_options['vim-lsp'] = {
##         \     'mark': 'lsp',
##         \     'matchers': ['matcher_head'],
##         \     'forceCompletionPattern': '\.|:|->|"\w+/*'
##         \ }
##     endif
##     return l:source_options
## endfunction
## 
## function DdcSourceParams()
##     let l:source_params = {'around': { 'maxSize': 500 }}
##     if g:nvim_lsp
##         let l:source_params['nvim-lsp'] = { 'kindLabels': {'Class': 'c'}, 'useIcon': v:true }
##    endif
##    return l:source_params
## endfunction
## 
## " Use matcher_head and sorter_rank.
## let s:sources = DdcSource()
## call ddc#custom#patch_global('sources', s:sources)
## let s:source_options = DdcSourceOptions()
## call ddc#custom#patch_global('sourceOptions', s:source_options)
## let s:source_params = DdcSourceParams()
## call ddc#custom#patch_global('sourceParams', s:source_params)
## call ddc#custom#patch_global('filterParams', { 'buffer': { 'requireSameFiletype': v:false }})
## 
## 
## "" " https://zenn.dev/shougo/articles/ddc-vim-pum-vim
## "" call ddc#custom#patch_global('completionMenu', 'pum.vim')
## "" call ddc#custom#patch_global('autoCompleteEvents', [
## ""     \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
## ""     \ 'CmdlineEnter', 'CmdlineChanged',
## ""     \ ])
## "" 
## "" nnoremap :       <Cmd>call CommandlinePre()<CR>:
## "" 
## "" function! CommandlinePre() abort
## ""   " Note: It disables default command line completion!
## ""   cnoremap <expr> <Tab>
## ""   \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
## ""   \ ddc#manual_complete()
## ""   cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
## ""   cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
## ""   cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
## "" 
## ""   " Overwrite sources
## ""   if !exists('b:prev_buffer_config')
## ""     let b:prev_buffer_config = ddc#custom#get_buffer()
## ""   endif
## ""   call ddc#custom#patch_buffer('sources',
## ""           \ ['cmdline', 'cmdline-history', 'around'])
## "" 
## ""   autocmd User DDCCmdlineLeave ++once call CommandlinePost()
## ""   autocmd InsertEnter <buffer> ++once call CommandlinePost()
## "" 
## ""   " Enable command line completion
## ""   call ddc#enable_cmdline_completion()
## "" endfunction
## "" 
## "" function! CommandlinePost() abort
## ""   cunmap <Tab>
## ""   cunmap <S-Tab>
## ""   cunmap <C-y>
## ""   cunmap <C-e>
## "" 
## ""   " Restore sources
## ""   if exists('b:prev_buffer_config')
## ""     call ddc#custom#set_buffer(b:prev_buffer_config)
## ""     unlet b:prev_buffer_config
## ""   else
## ""     call ddc#custom#set_buffer({})
## ""   endif
## "" endfunction
## 
## " Mappings
## 
## " <TAB>: completion.
## 
## " ddc.vim - pum.vim
## " inoremap <silent><expr> <TAB>
## "     \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
## "     \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
## "     \ '<TAB>' : ddc#manual_complete()
## " inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
## " inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
## " inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
## " inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
## " inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
## 
## 
## " if you use with vim-lsp, disable vim-lsp's signature help feature
## " let g:lsp_signature_help_enabled = 0
## 
## 
## if g:deoplete
##     " Shougo/deoplete.nvim
##     let g:deoplete#enable_at_startup = 1
## 
##     autocmd FileType denite call s:denite_my_settings()
##     function! s:denite_my_settings() abort
##       call deoplete#custom#buffer_option('auto_complete', v:false)
## 
##     " " ref. https://github.com/Shougo/denite.nvim/issues/657
##     " autocmd FileType denite-filter call s:denite_filter_my_settings()
##     " function! s:denite_filter_my_settings() abort
##     "   call deoplete#custom#buffer_option('auto_complete', v:false)
##     " endfunction
## 
## 
##       " エンターキー: 垂直分割でファイルを開く
##       nnoremap <silent><buffer><expr> <CR>
##       \ denite#do_map('do_action', 'vsplit')
##       " スペースキー: 水平分割でファイルを開く
##       nnoremap <silent><buffer><expr> <Space>
##       \ denite#do_map('do_action', 'split')
##       " エスケープキー: 終了
##       nnoremap <silent><buffer><expr> <Esc>
##       \ denite#do_map('quit')
##       " Qキー: 終了
##       nnoremap <silent><buffer><expr> q
##       \ denite#do_map('quit')
##       " Iキー: フィルター入力の開始
##       nnoremap <silent><buffer><expr> i
##       \ denite#do_map('open_filter_buffer')
##       " Aキー: フィルター入力の開始
##       nnoremap <silent><buffer><expr> a
##       \ denite#do_map('open_filter_buffer')
##     endfunction
## endif
## 
## " ddu ======================
## " nnoremap <C-p> :call ddu#start({'sources': [{'name': 'file_rec'}]})<CR>
