# ddc ---------------

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
    call ddc#custom#patch_global(
    \       'sources',
    \       [
    \           'around',
    \           'buffer',
    \           'deoppet',
    \           'necovim',
    \           'tabnine',
    \           'nvim-lsp',
    \       ]
    \   )
    call ddc#custom#patch_global(
    \       'sourceOptions',
    \       {
    \           '_': {
    \               'matchers': ['matcher_head'],
    \               'sorters': ['sorter_rank'],
    \               'converters': ['converter_remove_overlap']
    \           },
    \           'around': {
    \               'mark': 'A'
    \           },
    \           'buffer': {
    \               'mark': 'B'
    \           },
    \           'deoppet': {
    \               'mark': 'dp'
    \           },
    \           'necovim': {
    \               'mark': 'vim'
    \           },
    \           'tabnine': {
    \               'mark': 'TN',
    \               'isVolatile': v:true,
    \               'maxSize': 200,
    \           },
    \           'nvim-lsp': {
    \               'mark': 'lsp',
    \               'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \               'useIcon': v:true,
    \           },
    \       }
    \   )
    call ddc#custom#patch_global(
    \       'sourceParams',
    \       {
    \           'around': {
    \               'maxSize': 500,
    \           },
    \           'nvim-lsp': {
    \               'kindLabels': {
    \                   'Class': 'c'
    \               },
    \               'useIcon': v:true, 
    \           }
    \       }
    \   )
    call ddc#custom#patch_global(
    \       'filterParams',
    \       {
    \           'buffer': {
    \               'requireSameFiletype': v:false
    \           }
    \       }
    \   )

    " inoremap <silent><expr> <TAB>
    " \ pumvisible() ? '<C-n>' :
    " \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    " \ '<TAB>' : ddc#manual_complete()

    " <S-TAB>: completion back.
    " inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

    inoremap <silent><expr> <TAB>
    \   ddc#map#pum_visible() ? '<C-n>' :
    \   (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \   '<TAB>' : ddc#map#manual_complete()
    inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

    call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'Shougo/ddc-zsh'
# on_source = 'ddc.vim'

# [[plugins]]
# repo = 'Shougo/ddc-nextword'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

# nvim-lspconfig ----------

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
    lua <<EOF
        local nvim_lspconfig = require("lspconfig")
        local on_attach = function(client, bufnr)
        local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
        local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

        local opts = { noremap=true, silent=true }
            buf_set_keymap('n', '<F12>', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
        end

        nvim_lspconfig.pyright.setup{
            on_attach = on_attach,
            filetypes = { "python" }
        }

        local nvim_lsp_installer = require("nvim-lsp-installer")
        nvim_lsp_installer.on_server_ready(function(server)
            local opts = {}
            server:setup(opts)
        end)

        nvim_lsp_installer.settings({
          log_level = vim.log.levels.DEBUG,
        })

        vim.lsp.set_log_level("INFO")
EOF
    " nnoremap <F12> :LspDefinition
    " nnoremap <F12> <cmd>lua vim.lsp.buf.definition()<CR>
    " nnoremap <C-j> :LspDefinition<CR>
    set completeopt-=preview
'''
[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_source = '''
    call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_add = '''
    call signature_help#enable()
'''
